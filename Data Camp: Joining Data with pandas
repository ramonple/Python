Merge: 
new_name = item1.merge( item2, on = 'xxx',suffixes=('_a','_b') )
---- The suffix is needed only when the merged dataframe has two columns with same name. 

Merge more than two tables:
newdf = df1.merge(df2,on='col') \
            .merge(df3,on='col')\
            .merge(df4,on='col')
print(newdf.groupby('a').agg({ 'column' : 'count'/'median'/'mean'/'sum'}) )            

Left Join, Right Join, Outer Join
genres_movies = movie_to_genres.merge(pop_movies, how='right'/'left'/'outer', 
                                      left_on='movie_id', 
                                      right_on='id')

Merging on indexes
When usting left_on/ right_on, we should set left_index =True / right_index = True
movies_genres = movies.merge(movie_to_genres,left_on='id',left_index=Ture,right_on='movie_id',right_index=True)


Sort_Values:
new_name = sort_item(by='target_item',asceding = True/False)

count the total number of missing values in one paricular column:
xxx.isnull().sum()
number_of_missing_fin = movies_financials['budget'].isnull().sum()

################################################ Course 1: Data Merging Basics ###########################################################################

Inner join



# Merge the taxi_owners and taxi_veh tables
taxi_own_veh = taxi_owners.merge(taxi_veh,on='vid')

# Merge the taxi_owners and taxi_veh tables setting a suffix
taxi_own_veh = taxi_owners.merge(taxi_veh, on='vid', suffixes=('_own','_veh'))


Inner joins and number of rows returned
It is necessary to understand that inner joins only return the rows with matching values in both tables.

# Merge the wards and census tables on the ward column
wards_census = wards.merge(census, on='ward')


One to many relationship

# Group the results by title then count the number of accounts
counted_df = licenses_owners.groupby('title').agg({'account':'count'})

# Sort the counted_df in desending order
sorted_df = counted_df.sort_values(by='account', ascending=False)



Merging multiple DataFrames

# Merge the ridership, cal, and stations tables
ridership_cal_stations = ridership.merge(cal, on=['year','month','day']) \
							.merge(stations, on='station_id')
              
# Create a filter to filter ridership_cal_stations
filter_criteria = ((ridership_cal_stations['month'] == 7) 
                   & (ridership_cal_stations['day_type'] == 'Weekday') 
                   & (ridership_cal_stations['station_name'] == 'Wilson'))


# Merge licenses and zip_demo, on zip; and merge the wards on ward
licenses_zip_ward = licenses.merge (zip_demo,on='zip')\
            			.merge(wards,on='ward')

# Print the results by alderman and show median income
print(licenses_zip_ward.groupby('alderman').agg({'income':'median'}))

# Merge land_use and census and merge result with licenses including suffixes
land_cen_lic = land_use.merge(census, on='ward') \
                    .merge(licenses, on='ward', suffixes=('_cen','_lic'))
                    
# Group by ward, pop_2010, and vacant, then count the # of accounts
pop_vac_lic = land_cen_lic.groupby(['ward','pop_2010','vacant'], 
                                   as_index=False).agg({'account':'count'})
# Sort pop_vac_lic and print the results
sorted_pop_vac_lic = pop_vac_lic.sort_values(by=['vacant','account','pop_2010'], ascending=[False,True,True])




################################################ COURSE 2 Merging Tables With Different Join Types ################################################
Left Join

movies_taglines = movies.merge(taglines, on = 'id',how='left')

# Merge the movies table with the financials table with a left join
movies_financials = movies.merge(financials, on='id', how='left')

# Count the number of rows in the budget column that are missing 
number_of_missing_fin = movies_financials['budget'].isnull().sum()



Other Joins

two tables have differernt columns names but the same thing
tv_movies = movies.merge(tv_genre,how='right',left_on='id',right_on='movie_id')

Outer Joins
family_comedy = family.merge(comdedy,on='movie_id',how='outer',suffixes =('_fam','_com') )

# Merge action_movies to the scifi_movies with right join
action_scifi = action_movies.merge(scifi_movies, on='movie_id', how='right',
                                   suffixes=('_act','_sci'))

# From action_scifi, select only the rows where the genre_act column is null
scifi_only = action_scifi[action_scifi['genre_act'].isnull()]

# Use right join to merge the movie_to_genres and pop_movies tables
genres_movies = movie_to_genres.merge(pop_movies, how='right', 
                                      left_on='movie_id', 
                                      right_on='id')

# Count the number of genres
genre_count = genres_movies.groupby('genre').agg({'id':'count'})




Self-Join : Merging a table to itself
# Merge the crews table to itself
crews_self_merged = crews.merge(crews, on='id', how='inner',
                                suffixes=('_dir','_crew'))

# Create a boolean index to select the appropriate rows
boolean_filter = ((crews_self_merged['job_dir'] == 'Director') & 
                  (crews_self_merged['job_crew'] != 'Director'))
direct_crews = crews_self_merged[boolean_filter]



Merging on indexes

samuel = pd.read_csv('samuel.csv',index_col =['movie_id','cast_id'])
casts=pd.read_csv('casts.csv',index_col=['movie_id','casts_id'])
samuel_casts = samuel.merge(casts,on=['movie_id','cast_id'])

movies_genres = movies.merge(movie_to_genres,left_on='id',left_index=Ture,right_on='movie_id',right_index=True)







