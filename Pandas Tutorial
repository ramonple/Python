Pandas is a Python library.

Pandas is used to analyze data.


---------------------------------------- Pandas Tutorial ----------------------------------------

import pandas as pd

mydataset = {
  'cars': ["BMW", "Volvo", "Ford"],
  'passings': [3, 7, 2]
}

myvar = pd.DataFrame(mydataset)

>>>

    cars  passings
0    BMW         3
1  Volvo         7
2   Ford         2





df = pd.read_csv('data.csv')
print(df.to_string). # to_string() function is used to render a DataFrame to a console-friendly tabular output. 



---------------------------- Pandas Series ------------------------
What is a series?
A Pandas Series is like a column in a table. It is a one-dimensional array holding data of any type.

# create a Pandas Series
import pandas as pd
a = [1,7,2]
myvar = pd.Series(a)
print(myvar)

>>>
0    1
1    7
2    2
dtype: int64
# If nothing else is specified, the values are labeled with their index number. First value has index 0, second value has index 1 etc.



# Create Labels
import pandas as pd
a = [1,7,2]
myvar = pd.Series(a, index = ["x", "y", "z"])
print(myvar)
>>>
x    1
y    7
z    2
dtype: int64

# return the value of 'y'
print(myvar["y"])



import pandas as pd
calories = {"day1": 420, "day2": 380, "day3": 390}
myvar = pd.Series(calories)
print(myvar)
>>>
day1    420
day2    380
day3    390
dtype: int64


## To select only some of the items in the dictionary, use the index argument and specify only the items you want to include in the Series.

import pandas as pd
calories = {"day1": 420, "day2": 380, "day3": 390}
myvar = pd.Series(calories, index = ["day1", "day2"]) ==> only use the first two and ingore the third one 'day3'
print(myvar)


-- Data Frames
What is a DataFrame?
A Pandas DataFrame is a 2 dimensional data structure, like a 2 dimensional array, or a table with rows and columns


import pandas as pd

data = {
  "calories": [420, 380, 390],
  "duration": [50, 40, 45]
}
myvar = pd.DataFrame(data)
print(myvar)
>>>
   calories  duration
0       420        50
1       380        40
2       390        45


- Locate Row
print(df.loc[0])
print(df.loc[[0, 1]])
print(df.loc["day2"])

df = pd.read_csv('data.csv')


### to return the entire DataFrame. !!!!!!!!!!!
df.to_string() 

### read json
df.read_json()



If you have a large DataFrame with many rows, Pandas will only return the first 5 rows, and the last 5 rows


max_rows
The number of rows returned is defined in Pandas option settings.
You can check your system's maximum rows with the pd.options.display.max_rows statement.

import pandas as pd

print(pd.options.display.max_rows) 




Read JSON

Big data sets are often stored, or extracted as JSON.
JSON is plain text, but has the format of an object, and is well known in the world of programming, including Pandas.

Example:
import pandas as pd
df = pd.read_json('data.json')
print(df.to_string()).  # use to_string() to print the entire DataFrame.



Dictionary as JSON
JSON = Python Dictionary

df = pd.DataFrame(data)
print(df) 



------ Analyzing DataFrames ---------

-- head()
 
import pandas as pd
df = pd.read_csv('data.csv')
print(df.head(10))



-- tail()
There is also a tail() method for viewing the last rows of the DataFrame.

# Print the last 5 rows of the DataFrame:
print(df.tail())



df.info()




---------------------------------------- Cleaning Data ----------------------------------------
Data cleaning means fixing bad data in your data set.

Bad data could be:

Empty cells
Data in wrong format
Wrong data
Duplicates


--- Empty Cells ---


1. Remocec Rows
< df.dropna() >
#  By default, the dropna() method returns a new DataFrame, and will not change the original.

import pandas as pd
df = pd.read_csv('data.csv')
new_df = df.dropna()
pront(new_df.to_string())

df.dropna(inplace = True) # If you want to change the original DataFrame, use the inplace = True argument
                          # Now, the dropna(inplace = True) will NOT return a new DataFrame, but it will remove all rows containg NULL values from the original DataFrame.
                          

df.fillna(130, inplace = True)  # Replace NULL values with the number 130


# Replace Only For Specified Columns
df["Calories"].fillna(130, inplace = True)

x = df["Calories"].mean()
x = df["Calories"].mode()
x = df["Calories"].median()[0]

df["xx"].fillna(x,inplace=True)



df.dropna(subset=['Date'], inplace = True)

---- Wrong Format
df['Date'] = pd.to_datetime(df['Date'])


---- Wrong Data
# Set "Duration" = 45 in row 7:
df.loc[7, 'Duration'] = 45


# Loop through all values in the "Duration" column.
# If the value is higher than 120, set it to 120:
for x in df.index:
  if df.loc[x, "Duration"] > 120:
    df.loc[x, "Duration"] = 120
    
    
# Delete rows where "Duration" is higher than 120:    
for x in df.index:
  if df.loc[x, "Duration"] > 120:
    df.drop(x, inplace = True)
    


###### # loc and iloc in Pandas


1. selecting via a single value
loc[row_label, column_label]
iloc[row_position, column_position]

2. Selecting via a list of values
for example:
df.loc[['Thu', 'Fri'], 'Temperature'] = df.iloc[4, [1, 2]]
df.loc['Fri', ['Temperature', 'Wind']] = df.iloc[4, [1, 2]]


3. Selecting a range of data via slice

loc[A:B]  # both A and B are included
iloc[n:m]  # n is included, m is excluded

# A:B:S to select data from label A to label B with step size S



4. Selecting via conditions
df.loc[df.Humidity > 50, :]
df.loc[ (df.Humidity > 50) & (df.Weather == 'Shower'), ['Temperature','Wind']]

df.iloc[df.Humidity > 50, :]
df.iloc[list((df.Humidity > 50) & (df.Weather == 'Shower')), :]




---- Removing Duplicates

print(df.duplicated())

df.drop_duplicates(inplace = True)





---------------------------- Pandas - Data Correlations ----------------------------------

df. corr()

The number varies from -1 to 1.

What is a good correlation? 
It depends on the use, but I think it is safe to say you have to have at least 0.6 (or -0.6) to call it a good correlation.





---------------------------- Plotting ----------------------------
import pandas as pd
import matplotlib.pyplot as plt

df.plot()
plt.show()


df.plot(kind = 'scatter', x = 'Duration', y = 'Calories')
df["Duration"].plot(kind = 'hist')


