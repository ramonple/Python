From python 123

 --- Foundational Knowledge
 
1. 
__name__:
A double underscore prefix causes the Python interpreter to rewrite the attribute name in order to avoid naming conflicts in subclasses. 


2. 
String .format()  Method

Replacement fields are enclosed in curly braces ({}). 
Anything not contained in curly braces is literal text that’s copied directly from the template to the output.

example:
>>> print('{0} {1} cost ${2}'.format(6, 'bananas', 1.74))
6 bananas cost $1.74


>>> Note that replacement fields don’t have to appear in the template in numerical order. 
>>> '{2}.{1}.{0}/{0}{0}.{1}{1}.{2}{2}'.format('foo', 'bar', 'baz')
'baz.bar.foo/foofoo.barbar.bazbaz'


>>> you can omit the numbers in the replacement fields, this is referred to automatic field numbering
>>> '{}/{}/{}'.format('foo', 'bar', 'baz')
'foo/bar/baz'


>>> x, y, z = 1, 2, 3
>>> '{0}, {1}, {baz}'.format(x, y, baz=z)
'1, 2, 3'


A format of . 2f (note the f ) means to display the number with two digits after the decimal point.

example: print('{:.2f}'.format(area)) 

3.
# __name__是Python中一个隐含的变量它代表了模块的名字
# 只有被Python解释器直接执行的模块的名字才是__main__

if __name__ == '__main__':




4. eval()
The eval() method parses the expression passed to this method and runs python expression (code) within the program.
x = 1
print(eval('x+1') 
output: 2


-------  1. 人机交互

  
f = open('test.txt','w',encoding = 'utf-8')       
# 以写模式打开当前路径下的文件test.txt（文件不存在时创建文件），创建文件对象，命名为： f

print( object, sep ='', end='')

# end='\n'：输出语句的结束符号，默认每个输出语句结束时都用换行符 '\n' 结尾，使光标换到下一行。

print(*[1,2,3,4,5])          # 输出：1 2 3 4 5，输出时对列表对象（序列类型）进行解包
print(*'12345')              # 输出：1 2 3 4 5，输出时对字符串对象（序列类型）进行解包


range(n) （n > 0）可产生一个包含0-(n-1)的整数序列

n = int(input())  # 输入一个正整数 n

for i in range(5):           # 产生整数序列：0,1,2,3,4，依次赋值给i
	print(i)                 # 输出后换行，竖向输出0 1 2 3 4

# 加参数end = ','，输出后不换行，每个输出后跟一个逗号0,1,2,3,4,
for i in range(5):
	print(i,end = ',')   

for i in range(10):     # 从 0-9 循环10次，每次i依次取其中一个值
    print(i,end = ',')  # 每个输出后面跟一个逗号做为结束标记
# 0,1,2,3,4,5,6,7,8,9,

for i in range(1,11):   # 从 1-10 循环10次，每次i依次取其中一个值
    print(i,end = ',')
# 1,2,3,4,5,6,7,8,9,10,





‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬用户输入一个浮点数，用str.format格式化输出，保留3位小数。‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

n = float(input())
print('{:.3f'}'.format(n))


我的名字是***，来自**，我的爱好是***！
name = input()
city = input()
hobby = input()
print(f'我的名字是{name}，来自{city}，我的爱好是{hobby}!')



输入一个正整数 n，在一行中输出从 1到 n，中间无空格。
method 1:
n = int(input())
for i in range(1,n+1):
    print(i,end='')
    
method 2:
def s_num(n):
    for i in range(1,n+1):
        print(i,end='')
        
method 3:
if __name__  == '__main__':
   n = int(input())
   s_num(n)
   
 
 
 竖着输出
 Python中字符串可以按单个字符进行索引，第一个字符序号为0，正向递增，编写一个程序，用户输入一个字符串，按每行一个字符的形式进行输出。
 
 示例‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

输入	
Hello
输出
H
e
l
l
o

my_string = input()
for i in my_string:
        print(i)
        
        

 简单循环       
 输入一个整数 n，输出所有小于 n 的非负整数 i 的平方( 0 <= i < n )。
 
 def loop(n):
      for i in range(n)
          print(i**2)
          
 if __name__ =='__main__':
     n = int(input())
     loop(n)
     
     






--- 2. 数值计算

a = int(input()) # 接收一个正整数
b = int(input())

print("{} + {} = {}".format(a, b, a + b))
print("{} - {} = {}".format(a, b, a - b))
print("{} * {} = {}".format(a, b, a * b))
print("{} / {} = {}".format(a, b, a / b))






def division(m, n):
     print(m/n)  # 第一行输出 a 对 b 做整除的结果‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
     print(m/n) 

if __name__ = '__main__':
      a = int(input())
      b = int(input())
      division(a,b)
      
      


a = eval(input())   #输入整数字符串，转换为整数；输入浮点数字符串，转换为浮点数
b = float(input())  #输入整数和浮点数，都转换为浮点数
c = int(input())    #只接受整数输入，输出为整数




deposit = int(input())  # 存款金额本金
years = int(input())    # 存款年数
interest_rates = float(input())  # 年利率

new_deposit = deposit

for i in range(years):
    new_deposit = new_deposit * (1 + interest_rates )
    
interest = new_deposit - deposit
print("利息={:.2f}".format(interest))





import math

a = eval(input())
b = eval(input())

x = (-b + math.sqrt(2*a*math.sin(math.pi/3) * math.cos(math.pi/3)) ) / (2 * a)
print(x)







---- 3. 简单循环


# 输入一个正整数 n ，计算从 1 到 n 各数字的和，要求用一行代码实现
print( sum (range(1, int(input()) + 1) ) )




求a的b次幂
a = eval(input())
b = eval(input())
print(pow(a,b))



计算n 的阶乘
fact = 1
n = int(input())
for i in range(1, n +1):
    fact = fact * i
print(fact)



阶乘求和
def sum_fact(n):
    total, t =1, 1
    for i in range(2,n+1):
        t = t * i
	total = total + t 
    return(total)

n = int(input())
print(sum_fact(n))



    


















