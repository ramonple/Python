From python 123

 --- Foundational Knowledge
 
1. 
__name__:
A double underscore prefix causes the Python interpreter to rewrite the attribute name in order to avoid naming conflicts in subclasses. 

if __name__ == "__main__"

# Python file one module

print("File one __name__ is set to: {}" .format(__name__))
--> File one __name__ is set to: __main__



2. 
####### The String format() Method

Replacement fields are enclosed in curly braces ({}). 
Anything not contained in curly braces is literal text that’s copied directly from the template to the output.

example:
>>> print('{0} {1} cost ${2}'.format(6, 'bananas', 1.74))
6 bananas cost $1.74


>>> Note that replacement fields don’t have to appear in the template in numerical order. 
>>> '{2}.{1}.{0}/{0}{0}.{1}{1}.{2}{2}'.format('foo', 'bar', 'baz')
'baz.bar.foo/foofoo.barbar.bazbaz'


>>> you can omit the numbers in the replacement fields, this is referred to automatic field numbering
>>> '{}/{}/{}'.format('foo', 'bar', 'baz')
'foo/bar/baz'


>>> x, y, z = 1, 2, 3
>>> '{0}, {1}, {baz}'.format(x, y, baz=z)
'1, 2, 3'


A format of . 2f (note the f ) means to display the number with two digits after the decimal point.

example: print('{:.2f}'.format(area)) 



usage of the str.format() method looks like this:

>>> print('We are the {} who say "{}!"'.format('knights', 'Ni'))
We are the knights who say "Ni!"

The brackets and characters within them (called format fields) are replaced with the objects passed into the str.format() method. 

A number in the brackets can be used to refer to the position of the object passed into the str.format() method.

>>> print('{0} and {1}'.format('spam', 'eggs'))
spam and eggs
>>> print('{1} and {0}'.format('spam', 'eggs'))
eggs and spam



If keyword arguments are used in the str.format() method, their values are referred to by using the name of the argument.

>>> print('This {food} is {adjective}.'.format(
...       food='spam', adjective='absolutely horrible'))
This spam is absolutely horrible.




>>> print('The story of {0}, {1}, and {other}.'.format('Bill', 'Manfred',
                                                       other='Georg'))
The story of Bill, Manfred, and Georg.







3.
# __name__是Python中一个隐含的变量它代表了模块的名字
# 只有被Python解释器直接执行的模块的名字才是__main__

if __name__ == '__main__':




4. eval()
The eval() method parses the expression passed to this method and runs python expression (code) within the program.
x = 1
print(eval('x+1') 
output: 2


-------  1. 人机交互

  
f = open('test.txt','w',encoding = 'utf-8')       
# 以写模式打开当前路径下的文件test.txt（文件不存在时创建文件），创建文件对象，命名为： f

print( object, sep ='', end='')

# end='\n'：输出语句的结束符号，默认每个输出语句结束时都用换行符 '\n' 结尾，使光标换到下一行。

print(*[1,2,3,4,5])          # 输出：1 2 3 4 5，输出时对列表对象（序列类型）进行解包
print(*'12345')              # 输出：1 2 3 4 5，输出时对字符串对象（序列类型）进行解包


range(n) （n > 0）可产生一个包含0-(n-1)的整数序列

n = int(input())  # 输入一个正整数 n

for i in range(5):           # 产生整数序列：0,1,2,3,4，依次赋值给i
	print(i)                 # 输出后换行，竖向输出0 1 2 3 4

# 加参数end = ','，输出后不换行，每个输出后跟一个逗号0,1,2,3,4,
for i in range(5):
	print(i,end = ',')   

for i in range(10):     # 从 0-9 循环10次，每次i依次取其中一个值
    print(i,end = ',')  # 每个输出后面跟一个逗号做为结束标记
# 0,1,2,3,4,5,6,7,8,9,

for i in range(1,11):   # 从 1-10 循环10次，每次i依次取其中一个值
    print(i,end = ',')
# 1,2,3,4,5,6,7,8,9,10,





‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬用户输入一个浮点数，用str.format格式化输出，保留3位小数。‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

n = float(input())
print('{:.3f'}'.format(n))


我的名字是***，来自**，我的爱好是***！
name = input()
city = input()
hobby = input()
print(f'我的名字是{name}，来自{city}，我的爱好是{hobby}!')



输入一个正整数 n，在一行中输出从 1到 n，中间无空格。
method 1:
n = int(input())
for i in range(1,n+1):
    print(i,end='')
    
method 2:
def s_num(n):
    for i in range(1,n+1):
        print(i,end='')
        
method 3:
if __name__  == '__main__':
   n = int(input())
   s_num(n)
   
 
 
 竖着输出
 Python中字符串可以按单个字符进行索引，第一个字符序号为0，正向递增，编写一个程序，用户输入一个字符串，按每行一个字符的形式进行输出。
 
 示例‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

输入	
Hello
输出
H
e
l
l
o

my_string = input()
for i in my_string:
        print(i)
        
        

 简单循环       
 输入一个整数 n，输出所有小于 n 的非负整数 i 的平方( 0 <= i < n )。
 
 def loop(n):
      for i in range(n)
          print(i**2)
          
 if __name__ =='__main__':
     n = int(input())
     loop(n)
     
     






--- 2. 数值计算

a = int(input()) # 接收一个正整数
b = int(input())

print("{} + {} = {}".format(a, b, a + b))
print("{} - {} = {}".format(a, b, a - b))
print("{} * {} = {}".format(a, b, a * b))
print("{} / {} = {}".format(a, b, a / b))






def division(m, n):
     print(m/n)  # 第一行输出 a 对 b 做整除的结果‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
     print(m/n) 

if __name__ = '__main__':
      a = int(input())
      b = int(input())
      division(a,b)
      
      


a = eval(input())   #输入整数字符串，转换为整数；输入浮点数字符串，转换为浮点数
b = float(input())  #输入整数和浮点数，都转换为浮点数
c = int(input())    #只接受整数输入，输出为整数




deposit = int(input())  # 存款金额本金
years = int(input())    # 存款年数
interest_rates = float(input())  # 年利率

new_deposit = deposit

for i in range(years):
    new_deposit = new_deposit * (1 + interest_rates )
    
interest = new_deposit - deposit
print("利息={:.2f}".format(interest))





import math

a = eval(input())
b = eval(input())

x = (-b + math.sqrt(2*a*math.sin(math.pi/3) * math.cos(math.pi/3)) ) / (2 * a)
print(x)







---- 3. 简单循环


# 输入一个正整数 n ，计算从 1 到 n 各数字的和，要求用一行代码实现
print( sum (range(1, int(input()) + 1) ) )




求a的b次幂
a = eval(input())
b = eval(input())
print(pow(a,b))



计算n 的阶乘
fact = 1
n = int(input())
for i in range(1, n +1):
    fact = fact * i
print(fact)



阶乘求和
def sum_fact(n):
    total, t =1, 1
    for i in range(2,n+1):
        t = t * i
	total = total + t 
    return(total)

n = int(input())
print(sum_fact(n))



    
数列求和

用户输入一个小于10的正整数，求1 + 12 + 123 + 1234 + …… 的前n项的和

n = int(input())
my_sum=0
temp = 0

if n <10 :
  for i in range (1, n+1):
      temp = temp * 10 + i
      my_sum= my_sum + temp
  print(my_sum)
  
  
  
  


奇数数列求和
输入一个正整数 n，求数列1，3，5，……，（2n-1）的前n项的和。

n = int(input())
sum = 0

for i in range(1, n+1):
    sum = sum + (2*i -1)
print(sum)






分数序列求和
有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13...求出这个数列的前 n 项之和, n 由用户输入。

n = int(input())

my_sum = 0
current = 2
previous = 1

for i range(1, n+1):
   my_sum = my_sum + current / previous
   prevous, current = current, previous + current
print(my_sum)







正负交错数列前n项和
1-1/2+2/3-3/5+4/8-5/13+...的前n项和，n由用户输入（n>0），结果用str.format()方法保留小数点后6位数字输出。

n = int(input())
result = 1
sign = -1
previous, current = 1, 1

for i range(1,n):
   previous, current = current, previous + current
   result = result + sign * i / current
   sign = - sign
print('{:.6f}'.format(result))





十进制整数转二进制
十进制整数转二进制的方法是：除以2，取出余数，商继续除以2，直到得到0为止，将取出的余数逆序即可得到对应的二进制数的各位。 

例如：22转二进制的计算过程：
22 / 2 11  余0
11/2    5   余 1
5 /2     2   余 1
2 /2     1   余 0
1 /2     0   余 1
得到22的二进制是10110


num = int(input())
s=''

if num == 0 :
   s = '0'
while num! =0:
   s = s + str(num % 2) # 将num对2取余的结果转字符串拼接到s
   num = num // 2
print( s[::-1])







统计学生平均成绩与及格人数
编写程序，计算学生们的平均成绩，并统计及格（成绩不低于60分）的人数。题目保证输入与输出均在整型范围内。

# Python’s map() is a built-in function that allows you to process and transform all the items in an iterable without using an explicit for loop, a technique commonly known as mapping.
#  map(function, iterable, ...)
#     Return an iterator that applies function to every item of iterable, yielding the results.

score = list(map(int,input().split()))
average = sum(score / len(score) )
count = len (list(x for x in score if x > = 60))
print('average ={}.format(average))
print('count={}.format(count))






   








---- 4. 简单分支

a/b

输出实数a除以b的结果，计算结果四舍五入，保留2位小数。

a=eval(input())
b=eval(input())

if b == 0:
   print('error')
else:
   print(round(a/b,2))

# round(number, digits)





判断闰年

year = int(input())
if (year%400 == 0) or (year%4 == 0 and year%100 !0):
   print('True')
else:
   print(False)
   




今年多少天？

year = int(input())

if (year % 400 == 0) or (year % 4 == 0 and year % 100 != 0):
      print(366)
else:
      print(365)
      
      
      
      
      
今天是第几天
输入年/月/日（用斜杠分隔），输出该日期是这一年的第几天（题目保证年、月、日都是合法输入）？

year, month, day = map(int, input().split('/'))

days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

if (year%4 == 0 and year%100!= 0) or (year%400 ==0):
   days[1] = 29
sumDay = sum(days[:month - 1]) + day
print('{}年{}月{}日是{}年第{}天'.format(year, month, day, year, sumDay))






判断奇偶数
用户输入一个正整数，判断该数是奇数还是偶数，如果奇数输出odd，偶数则输出even

n = int(input())

if n%2 == 0:
   print('even')
else:
   print('odd')
   
   
   
   
   

计算整数 n 的阶乘
输入一个数值，如果输入的数据为浮点数或者负数，输出”ERROR“，否则计算输入的数的阶乘并输出。
import math
n = eval(input())
if n >= 0 and type(n) == int:
   print(math.factorial(n))
else:
   print('Error')
   
   `
   
   
  
实现用户输入用户名和密码，当用户名为 admin且密码为123456时，显示“登录成功”，否则显示“登录失败”。
username = input()
password=()

if username = 'admin' and password ='123456':
   print('Success')
else:
   print('Error')
   
   
   


简单模拟用户登陆过程，输入账户与密码，验证成功输出“Success”，失败则输出“Fail”‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
初始系统账号密码为：‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
user="whut001" pwd="999999"

a = input()
b = input()

if a == user and b = pwd :
  print('Success')
else:
  print('Fail')
  
  
  
  

判断是否直角三角形
输入三个数a,b,c, 判断能否以它们为三个边长构成直角三角形。若能，输出YES，否则输出NO。

a = eval(input())
b = eval(input())
c = eval(input())

if a * a + b* b = c * c or a * a + c * c == b * b or c * c + b * b == a * a:
 print('Yes')
else:
 print('No')
 
 
 
 
 
 
 判断三角形并计算面积
 a = float(input())
 b = float(input())
 c = float(input())
 
 if a+b>c and a+c>b and b+c>a:
    print('Yes')
    p=(a+b+c)/2
    area = (p * (p - a) * (p - b) * (p - c)) ** (1/2) 
    print('{:.2f}'.format(area))
 else:
    print('Not a triangle')
    
    
      



百分制成绩转换五分制

n = int(input())

if n >= 90:
    print("A")
elif n>=80 and n<90:
    print("B")
elif n>= 70 and n<80:
    print("C")
elif n>=60 and n<70:
    print("D")
else:
    print("E")
    
    
    
    
    
百分制成绩转换五分制E   

score = int(input())
degree = 'AABCDEEEEE'

if score > 100 or score < 0:
    print("data error!")
else:
    print(degree[10 - score // 10])
    
    
    
    
    
    
 出租车计费   
（1）起步里程为3公里(含3公里)，起步费13元；
（2）载客里程3~15公里范围的，除起步费外，超过3公里的部分按基本单价2.3元/公里计算；
（3）载客里程超过15公里的，15公里内的按照（2）计算，超过15公里的基本单价加收50%的费用；
（4）时速低于12公里/小时的慢速行驶时间计入等待时间，每等待1分钟加收1元；

distance, wait = map(int,input().split(','))

if distance < =3:
   fee = 13 + wait * 1
elif distance < =15:
   fee = 13 + (distance -3) * 2.3 + wait * 1
else:
   fee = 13 + (15-13) * 2.3 + (distance - 15) * 2.3 * (1+0.5) + wait * 1

print('{:.0f}'.format(fee))


### map(int,input().split(''))
input() will query the user for input, and read one line of user input;
.split() will split that input into a list of “words”;
map(int, ...) will call int on each word, it will to that lazily (although that is not important here); and
x, y = ... will unpack the expression into two elements, and assign the first one to n and the second one to S

input:
x, y = map(int, input("Enter 2 number with space: ").split())
print("First Number: ", x)
print("Second Number: ", y)

output:
Enter 2 number with space: 50 100
First Number: 50
Second Number: 100







一元二次方程求根

一元二次方程ax2+bx+c=0，a、b、c的值由用户在三行中输入，根据用户输入的数值求解方程的实数解：‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

如果a值 为0，根据b值判断方程是否有解并输出，如果a与b同时为0，则输出Data error!‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
如果方程无实数解，输出“该方程无实数解”；‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
如果方程有两个相同的实数解，输出一个解，结果保留2位小数；‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
如果方程有两个不同的实数解，在一行内按从大到小顺序输出方程的两个解，用空格分隔，结果保留2位小数。

a = float(input())
b = float(input())
c = float(input())

delta = b * b - 4 * a * c

if a ==0 and b!= 0 :
   print('{:.2f}'.format(-c/b))
elif a ==0 and b == 0:
   print('Data error!')
elif delta < 0 :
   print(' no real root')
elif delta == 0 :
   print('{:.2f}'.format( - b / (2*a) ) )
else:
    x1 = (-b + delta ** 0.5) /( a * 2)
    x2 = (-b - delta ** 0.5) /(a * 2)
    if x 1 < x 2:
       x1, x2 = x2, x1
    print('{:.2f} {:.2f}'.format(x1,x2))
    
    







分段函数A

x = int(input())

if x > 10 or x < -10:
   print('Error')
else:
   if 0 <= x < 6:
        y = x + 14
    elif 6 <= x <= 10:
        y = 6 * x
    else:
        y = 2 * x * x * x + 4 * x * x + 3
    print(y)
    
    
    
 分段函数B
 
 import math
 
 x = int(input())
 
 if x > 6 or x < -6:
    y = 0
 elif 0 <= x <= 3:
    y = math.factorial(x)
 elif 3 <= x <= 6:
    y = pow(x,x-2)
 else:
    y = abs(x) + 5
 print(y)
 
 
 
 
 个税计算器
 全月应纳税所得额（含税级距）  税率(%)   速算扣除数
不超过3,000元             3                0
超过3,000元至12,000元的部分   10            210
超过12,000元至25,000元的部分 20         1,410
超过25,000元至35,000元的部分 25         2,660
超过35,000元至55,000元的部分 30         4,410
超过55,000元至80,000元的部分 35         7,160
超过80,000元的部分                   45         15,160

s = float(input())
# 先判断输入是正数，然后根据输入的工资范围定税率和速算扣除数

if s < 0:
    print("error")
else:
    salary = s - 5000
    if salary <= 0:
        fee, num = 0, 0
    elif salary <= 3000:
        fee, num = 3, 0
    elif salary <= 12000:
        fee, num = 10, 210
    elif salary <= 25000:
        fee, num = 20, 1410
    elif salary <= 35000:
        fee, num = 25, 2660
    elif salary <= 55000:
        fee, num = 30, 4410
    elif salary <= 80000:
        fee, num = 35, 7160
    else:
        fee, num = 45, 15160
    tax = abs(salary * fee / 100 - num)
    print("应缴税款{:.2f}元，实发工资{:.2f}元。".format(tax, salary + 5000 - tax))






分期付款计算器

购买房屋或大宗家电时，很多时候可以分期付款，还款方式分为等额本息和等额本金两种：‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

等额本息（Average Capital Plus Interest:ACPI）还款公式:‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

每月还款额=贷款本金月利率(1+月利率)**总还款月数/((1+月利率)**总还款月数-1)‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

等额本金（Average Capital:AC）还款公式:‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

每月还款额=贷款本金/总还款月数+(贷款本金-累计已还款本金)*月利率‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

设计一个程序计算分期付款时每一期的应还款额，还款方式输入错误时，输出“还款方式输入错误”。


price = float(input())
month = int(input())
mode=input()
rate = float(input())

if mode = 'AC'
   ls =[]
   for i in range(month):
       repayment = price / month + (price - price - price/month *i) * rate ls.append(round(repayment,2))
   print(ls)
elif mode == 'ACPI':
   repayment = price * rate * (1+rate) ** month/ ((1+rate_) ** month - 1)
   print((round(repayment,2))
else:
   print('Error')
   
   


字符大小写转换

s = input()

for c in s:
    if c.islower():
       print(c.upper(),end='')
    elif c.isupper():
       print(c.lower(),end='')
    else:
       print(c,end='')
       
 
 
 
 
 
 
 
 
 
 
  ----  5. 流程控制
  
  
  
  特殊数列求和
  
  用户输入一个小于10的正整数，求1 + 12 + 123 + 1234 + …… 的前n项的和，当输入大于或等于10时，输出“data error!”

  n = int(input())
  
  if n < 10 :
     total = 0
     tmp = 0
     
     for i in range(1,n+1):
         tmp = tmp * 10 + i
	 total = total + tmp
     print(tmp)
     
  else:
     print('data error')
     
     
     
     
     
     
     
     
 分数数列前n项和
 
 输入一个正整数 n, 计算并输出数列1、-1/2、2/3、-3/5、4/8、-5/12...的前n项和。
 
 n = int(input())
 
 a,b=1,2
 sign = -1
 total = 1
 
 for i in range(1,n):
     total = total + flag * a/b
     a,b=i+1,a+b
     sign = -sign
 print(total)
 
 
 
 
 
 
 
 
 
阶乘和数
 
一个正整数如果等于组成它的各位数字的阶乘之和，则该正整数称为阶乘和数。例如正整数145，1!+4!+5!等于145，因此145就是一个阶乘和数。
输入一个正整数，计算它的各位数字的阶乘之和，判断它是否是一个阶乘和数。当输入的数字为阶乘和数时，输出“YES”,否则输出“NO”。注意：输入的正整数的最高位不为0。

import math

n = input()
s = sum(math.factorial(int(i)) for i in n)

if int(n) == s:
   print('yes')
else:
   print('No')
   
   
   
   
   
   
   
计算圆周率   

根据下面的泰勒级数关系式，依次累加绝对值不小于阈值的项，求圆周率的值。‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬
pi/4 = 1 - 1/3 + 1/5 + 1/7 + ... + (-1)^k * 1/(2k+1)

threshold = eval(input())
pi4 = k = 0
sign = 1
while abs(1 / (2 * k + 1)) >= threshold:
    pi4 = pi4 + sign * 1 / (2 * k + 1)
    k = k + 1
    sign = - sign
print("{:.6f}".format(pi4*4))






求e的近似值B

自然常数e可以用级数1+1/1!+1/2!+⋯+1/n!来近似计算。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‪‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

本题要求用该公式计算e的近似值，若最后一项（1/n!）小于给定的阀值时，终止计算（该项不计入）。


import math

threshold = float(input())
e = 1
i = 1
while True:                                # while True means loop forever.
      if 1 / math.factorial(i) < threshold:
         break                             # The break statement terminates the loop containing it.
else:
       e=e+1/math.factorial(i)
       i=i+1
print('{:.8f}'.format(e))







二分法求函数的零点
现有方程：f(x) = x5-15x4+85x3-225x2+274x-121, 已知f(x)在[1.5,2.4]区间有且只有一个根，用二分法求解该根。

def f(x):
  return x ** 5 - 15 * x ** 4 + 85 * x ** 3 - 225 * x ** 2 + 274 * x - 121
# The return keyword is to exit a function and return a value.
 
def bisection_method(low,high):
    while True:
       mid = (low + high) / 2
       if abs(f(mid)) < 1 * 10 ** -n:
          return '{:.6f}'.format(mid)
       elif f(mid) < 0:
          high = mid
       else:
          low = mid
	 
if __name__ = '__main__':
  n = int(input())
  Low, High = 1.5, 2.4 
  print(bisection_method(Low,High))
  
 
 
 
 



高次方程求根
已知f(1.5)>0,f(2.4)<0，且在[1.5,2.4]区间只且只有一个根，求该根（假定多项式值小于10^-6时可近似为0）。要求四舍五入到小数点后6位

def f(x):
    # 这个函数用来计算这个多项式
    return x ** 5 - 15 * x ** 4 + 85 * x ** 3 - 225 * x ** 2 + 274 * x - 121
    
x1, x2 = 1.5, 2.4
while abs(f((x1 + x2) / 2)) > 1e-6:
    # 二分法，如果大于0调整下界，反之调整上界
    if f((x1 + x2) / 2) > 0:
        x1 = (x1 + x2) / 2
    else:
        x2 = (x1 + x2) / 2
print("{:.6f}".format((x1 + x2) / 2))    






计算函数曲线与x轴包围的面积

计算函数曲线在区间(a,b)与x轴包围的面积，可将这个区域平行于y轴切分成相等宽度的小梯形，每个梯形的面积可近似求出，所有梯形面积的和就是函数曲线与x轴包围的面积，
也就是函数在给定区间的积分值，dx越小，梯形近似度越高，计算结果越精确，也就是说区间切分段的越多，结果越精确。‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬


import math

a, b = map(float, input().split())  # 输入区间起点和终点
n = int(input())                    # 输入区间切分数量
area = 0                            # 面积初值
x = a                               # 设定起点x值
dx = abs(a - b) / n                 # 计算每个小区间的高度，即每个小梯形的高度

for i in range(n):
    # 遍历n个区间，计算每个小梯形面积并累加到一起
    area = area + dx * (abs(math.sin(x+i*dx)) + abs(math.sin(x+i*dx+dx)))/2
print('{:.2f}'.format(area))








与7无关的数
一个正整数，如果它能被7整除，或者它的十进制表示法中某一位的数字为7，则称其为与7相关的数、 求所有小于n(n < 100)的与7无关的正整数以及他们的平方和。

n = int(input())
total = 0
ls = []
for i in range(n):
    if not (i % 7 == 0 or i % 10 == 7 or i // 10 == 7):
        total = total + i * i  # 计算平方和
        ls.append(i)  # 往列表里塞满足条件的数
print(ls)
print(total)





鸡兔同笼B
一个笼子里面关了若干只鸡和兔子（鸡有2只脚，兔子有4只脚，没有例外），已经知道了笼子里面脚的总数feet，则笼子里至少有多少只动物，至多有多少只动物？

n = int(input())
for i in range(n):
    feets = int(input())
    if feets % 4 == 0:  # 如果鸡的数量是偶数
        least, most = feets // 4, feets // 2
    elif feets % 2 == 0:  # 如果输入没错
        least, most = (feets - 2) // 4 + 1, feets // 2
    else:  # 如果没有满足答案
        least, most = 0, 0
    print(least, most)
    
    
    
    
    
黑色星期五

import datetime
year = int(input())  #输入任意年份
days = [datetime.date(year, i, 13) for i in range(1, 13)]  #产生该年每个月13日 的列表
for i in days:
    if i.isoweekday()==5:  # the function isoweekday() returns an integer value  corresponding to the day of the week.
        print(i)   
	
	
	
	






输出三角形字符阵列

编写程序，输出n行由大写字母A开始构成的三角形字符阵列。

n = int(input())
s = 'A'
if 1<=n<7:
    for i in range(n):
        for j in range(n-i):
            print(s,end = ' ')
            s=chr(ord(s)+1)
        print()
	
	
	
	
	
	
	
	







