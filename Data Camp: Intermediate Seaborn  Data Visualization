
####################################  Course 1: Seaborn Introduction ####################################

seaborn:
sns.distplot(df['xx']) --dist: distribution

pandas: 
df['xx'].plot.hist()


Using the distribution plot
Customizations: kde, rug, hist, kdeplot, rugplot
          # bin sargument for matplotlib hist(), or None, optional Specification of hist bins. If unspecified, as reference rule is used that tries to find a useful default.
            kde (True/False, optional) Whether to plot a gaussian kernel density estimate.
            rug (True/False, optional) Whether to draw a rugplot on the support axis.
            hist (True/False, optional) Whether to plot a (normed) histogram.
            kde_kws   show a shaded kde. e.g., kde_kws={'shade'=True})




Regression Plots in Seaborn

sns.regplot(x='',y='',data=df)

lmplot() builds on top of the base regplot()
- regplot - low level
   sns.regplot(x='',y='',data=)
   
- lmplot - high level --> much more powerful
   sns.lmplot(x='',y='',data=)
   
   
   

 implot faceting

 - organize data by colors (hue)
      sns.lmplot(x='',y='',data= , hue='type')
 - organize data by columns (col)
      sns.lmplot(x='',y='',data=, col='type')




 #################################### Course 2:  Customizing Seaborn Plots  ####################################
 sns.set()
 df[''].plot.hist()
 
 
 
 
 sns.set_style
 
 for style in ['white','dark','whitegrid','darkgrid','ticks']:
     sns.set_styple(style)
     sns.displotstyle(df[''])
     plt.show()
     


removing axes with despine()
- seaborn contains a shortcut for removing spines of a plot:
sns.set_style('white')
sns.distplot(df[''])
sns.despine(top=True,right=True,left=True)



-- colors in seaborn
 
seaborn supports assigning colors to plots using matplotlib color codes

sns.set(color_codes=True)
sns.distplot(df['Tuition'],color='g')


set palettes
set_palette() function to define a platte

sns.palplot() - displays a palette
sns.color_palette() - returns the current palette

for p in sns.palettes.SEABORN_PLAETTES:
      sns.set_palette(p)
      sns.palplot(sns.color_palette())
      plt.show()
      
      
defining customer palettes

circular colors = when the data is not ordered -> sns.palplot(sns.color_palette('Paired',12))
sequential colors = when the data has a consistent range from high to low -> sns.palplot(sns.color_palette('Blues',12))
divering colors = when both the low and high values are interesting -> sns.palplot(sns.color_palette('BrBg',12))


----- sns.palplot(sns.color_palette('xxxx',number_of_color))



# Set the default Seaborn style and enable the matplotlib color codes.
sns.set(color_codes=True) ---> set default as True
# Create a distplot for the fmr_3 column using matplotlib's magenta (m) color code.
sns.distplot(df['fmr_3'], color='m')

# Show the plot
plt.show()


# Create a for loop to show the difference between the bright and colorblind palette.
for p in ['bright', 'colorblind']:
    sns.set_palette(p)
    sns.distplot(df['fmr_3'])
    plt.show()
    
    
    
    

    
Customizing with matplotlib

most customisation available through matplotlib Axes objects
Axes can be passed to seaborn functions
    
 fig,ax = plt.subplots()
 sns.distplot(df[''],ax=ax)
 ax.sett(xlabel='',)
 
 the axes objects supports many common customisations
  fig,ax = plt.subplots()
  sns.distplot(df[''],ax=ax)
  ax.sett(xlabel='',ylabel='',xlim=(0,xxxx),title ='')
  
    
 combing plots
 
# Create a plot with 1 row and 2 columns that share the y axis label
fig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, sharey=True)

# Plot the distribution of 1 bedroom apartments on ax0
sns.distplot(df['fmr_1'], ax=ax0)
ax0.set(xlabel="1 Bedroom Fair Market Rent", xlim=(100,1500))

# Plot the distribution of 2 bedroom apartments on ax1
sns.distplot(df['fmr_2'], ax=ax1)
ax1.set(xlabel="2 Bedroom Fair Market Rent", xlim=(100,1500))

# Display the plot
plt.show()
 
 
 vertical line using --- axvline --- 
# Add vertical lines for the median and mean
ax.axvline(x=median, color='m', label='Median', linestyle='--', linewidth=2)
ax.axvline(x=mean, color='b', label='Mean', linestyle='-', linewidth=2)
 
 
 
 
 
 
 
 
  #################################### Course 3: Additional Plot Types   ####################################
  
  Categorical Plot Types
 -- data which takes on a limited and fixed number of values
 
sns.stripplot(data=,y='',x='',jitter=True) -- 
     Jitter is simply the addition of a small amount of horizontal (or vertical) variability to the data in order to ensure all data points are visible.

sns.swarmplot(data=df,y='',x='')
---- swarmplot: uses a complex algorithm tto place the observarions in a manner where they are not overlap.
---- downside: the swarmplot() does not scale well to large datasets

sns.boxplot(data=df,y='',x='')

sns.violinplot(data=df,y='',x='')

sns.lvplot(data=df,y='',x='')
--- lvplot() is a hybrid between a boxplot() and violineplott() and is relatively quick to render and easy to interpret

sns.pointplot() 

sns.countplot()




Regression Plot

sns.regplot(data=df,x='',y='',marker='+')

Evaluating regression with residplot()
--- a residual plot is useful for evaluating tthe fit of a model
--- seaborn supports through residplot() function
sns.residplot(data=df,x='',y='') --> ideally be random


polynomial regression
--- seaborn supports polynomial regression using the order paramer
sns.regplot(data=df,x='',y='',order=2)
sns.residplot(data=df,x='',y='',order=2)



Categorical values
sns.regplot(data=df,x='',y='',x_jitter=.1,order=2)



Estimators
in some cases, an x_estimattor can be useful for highlighting trends
sns.regplot(data=df,x='',y='',x_estimator=np.mean,order=2)


x_bins --> divide the data into several bins
sns.regplot(data=df,x='',y='',x_bins=4)









Matrix plot - heat map

A heatmap is a common matrix plot that can be used to graphically summarize the relationship between two variables.

seaborns heatmap()
pandas crosstab() is frequently used to manipulate the data

pd.crosstab(df['xx'],df[''],values=df['xx'],aggfunc='mean').round(0)


Build a heatmap
sns.heatmap(pd.crosstab(df['xx'],df[''],values=df['xx'],aggfunc='mean'))


Customise a heatmap
sns.heatmap(df_crosstab,annot=True,fmt='d',cmap='YlGnBu',cbar=False,linewidths=.5)
 ---  annot equals True to turn on annotations in the individuals cells
 ---  the fmt (format) option ensures the results are displated in integers
 ---  a custom cmap of Yellow-Green-Blue to change the shading we use
 ---  cbar = False the color bar does not show
 ---  passing a variable to linewidths put set some space between cells



centering a heatmap
-- seaborn supports centering the heatmap colors on a specific value
-- center = df_crosstab.loc[]
sns.heatmap(df_crosstab,annot=True,fmt='d',cmap='YlGnBu',cbar=True,center=df_crosstab.loc[9,6])


Customizing heatmaps
plotting a correlation matrix
- pandas corr function calculates correlations between columns in a dataframe
- the output can be converted to a heatmap with seaborn
sns.heatmap(df.corr())







-- exercise:

# Create a crosstab table of the data
pd_crosstab = pd.crosstab(df["Group"], df["YEAR"])
print(pd_crosstab)

# Plot a heatmap of the table
sns.heatmap(pd_crosstab)

# Rotate tick marks for visibility
plt.yticks(rotation=0)
plt.xticks(rotation=90)

plt.show()









Customizing heatmaps
# Plot a heatmap of the table with no color bar and using the BuGn palette
sns.heatmap(pd_crosstab, cbar=False, cmap="BuGn", linewidths=0.3)






  #################################### Course 4: Creating Plots on Data Aware Grids   ####################################

Using FacetGrid, factorplot and lmplot

1. Using FacetGrid, factorplot and lmplot
One of Seaborn's most powerful features is its ability to combine multiple smaller plots into a larger visualization that can help identify trends 
in data with many variables. 
2. Multiple plots of data
The concept of small multiples is useful for analyzing data with many variables. 
The idea is that you can quickly identify trends in data by comparing multiple plots side by side using the same scales and axes. 
These plots are referred to as a trellis or lattice plot. 
In data science, this concept is also frequently called <faceting>. 
3. Tidy data
One very important requirement for Seaborn to create these plots is that the data must be in tidy format. 
This means that each row of the data is a single observation and the columns contain the variables. 
4. FacetGrid
Seaborn's FacetGrid manages the back end data manipulations to make sure that the data is split across rows, columns and hue and then used to make the appropriate plot type.

g = sns.FaceGrid(df,col='')
g.map(sns.boxplot,'xx',order=['1,'2','3','4'])
      

factorplot()
is a simpler way to use a FacetGrid for categorical data
combines the facetting and mapping process into 1 function
sns.factorplot(x='',data=df,col='',kind='box') --> same output as previous code:  
                               g = sns.FaceGrid(df,col='')
                               g.map(sns.boxplot,'xx',order=['1,'2','3','4'])


lmplot() -> used to draw a scatter plot onto a FacetGrid
sns.lmplot(data=df,x='',y='',col='',fit_reg=False)

lmplot with regression
sns.lmplot(data=df,x='',y='',col='',row='')




Exercise:
# Create FacetGrid with Degree_Type and specify the order of the rows using row_order
g2 = sns.FacetGrid(df, 
             row="Degree_Type",
             row_order=['Graduate', 'Bachelors', 'Associates', 'Certificate'])

# Map a pointplot of SAT_AVG_ALL onto the grid
g2.map(sns.pointplot, 'SAT_AVG_ALL')



Using a factorplot
In many cases, Seaborn's factorplot() can be a simpler way to create a FacetGrid. 
Instead of creating a grid and mapping the plot, we can use the factorplot() to create a plot with one line of code.

# Create a factor plot that contains boxplots of Tuition values
sns.factorplot(data=df,
         x='Tuition',
         kind='box',  --> boxplot
         row='Degree_Type')
        
# Create a facetted pointplot of Average SAT_AVG_ALL scores facetted by Degree Type 
sns.factorplot(data=df,
        x='SAT_AVG_ALL',
        kind='point',  --> point plot
        row='Degree_Type',
        row_order=['Graduate', 'Bachelors', 'Associates', 'Certificate'])        




Using a lmplot
The lmplot is used to plot scatter plots with regression lines on FacetGrid objects.

# Create a FacetGrid varying by column and columns ordered with the degree_order variable
g = sns.FacetGrid(df, col="Degree_Type", col_order=degree_ord) ---> col_order = /row_order=

# Map a scatter plot of Undergrad Population compared to PCTPELL
g.map(plt.scatter, 'UG', 'PCTPELL')


# Re-create the previous plot as an lmplot
sns.lmplot(data=df,
        x='UG',
        y='PCTPELL',
        col="Degree_Type",
        col_order=degree_ord)
        
        
        
# Create an lmplot that has a column for Ownership, a row for Degree_Type and hue based on the WOMENONLY column
sns.lmplot(data=df,
        x='SAT_AVG_ALL',
        y='Tuition',
        col="Ownership",
        row='Degree_Type',
        row_order=['Graduate', 'Bachelors'],
        hue='WOMENONLY',
        col_order=inst_ord)
        
        
        
        
        


Using PairGrid and pairplot
When exploring a dataset, one of the earliest tasks is exploring the relationship between pairs of variables. 
This step is normally a precursor to additional investigation.

PairGrid shows pairwise relationships between data elements
g = sns.PairGrid(df,vars=['',''])
g = g.map(plt.scatter)

g = g.map_diag(plt.hist)
g = g.map_offdiag(plt.scatter)


pairplot is a shortcut of pairGrid

sns.pairplot(df,vars=['',''],kind='reg',diag_kind='hist') --> diag_kind

sns.pairplot(df.query(''),vars=['',''],hue=]],palette='',plot_kws={''})



# Build a pairplot with different x and y variables
sns.pairplot(data=df,
             x_vars=["fatal_collisions_speeding", "fatal_collisions_alc"], --> different x and y
             y_vars=['premiums', 'insurance_losses'],
             kind='scatter',
             hue='Region',
             palette='husl')

plt.show()
plt.clf()





diag_kind can be used to specify the plot type on the diagonals.
kind can be used to specify the non-diagonal plot type


# plot relationships between insurance_losses and premiums
sns.pairplot(data=df,
             vars=["insurance_losses", "premiums"],
             kind='reg',
             palette='BrBG',
             diag_kind = 'kde',
             hue='Region')

plt.show()
plt.clf()






























      
