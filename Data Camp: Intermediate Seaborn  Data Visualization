
####################################  Course 1: Seaborn Introduction ####################################

seaborn:
sns.distplot(df['xx']) --dist: distribution

pandas: 
df['xx'].plot.hist()


Using the distribution plot
Customizations: kde, rug, hist, kdeplot, rugplot
          # bin sargument for matplotlib hist(), or None, optional Specification of hist bins. If unspecified, as reference rule is used that tries to find a useful default.
            kde (True/False, optional) Whether to plot a gaussian kernel density estimate.
            rug (True/False, optional) Whether to draw a rugplot on the support axis.
            hist (True/False, optional) Whether to plot a (normed) histogram.
            kde_kws   show a shaded kde. e.g., kde_kws={'shade'=True})




Regression Plots in Seaborn

sns.regplot(x='',y='',data=df)

lmplot() builds on top of the base regplot()
- regplot - low level
   sns.regplot(x='',y='',data=)
   
- lmplot - high level --> much more powerful
   sns.lmplot(x='',y='',data=)
   
   
   

 implot faceting

 - organize data by colors (hue)
      sns.lmplot(x='',y='',data= , hue='type')
 - organize data by columns (col)
      sns.lmplot(x='',y='',data=, col='type')




 #################################### Course 2:  Customizing Seaborn Plots  ####################################
 sns.set()
 df[''].plot.hist()
 
 
 
 
 sns.set_style
 
 for style in ['white','dark','whitegrid','darkgrid','ticks']:
     sns.set_styple(style)
     sns.displotstyle(df[''])
     plt.show()
     


removing axes with despine()
- seaborn contains a shortcut for removing spines of a plot:
sns.set_style('white')
sns.distplot(df[''])
sns.despine(top=True,right=True,left=True)



-- colors in seaborn
 
seaborn supports assigning colors to plots using matplotlib color codes

sns.set(color_codes=True)
sns.distplot(df['Tuition'],color='g')


set palettes
set_palette() function to define a platte

sns.palplot() - displays a palette
sns.color_palette() - returns the current palette

for p in sns.palettes.SEABORN_PLAETTES:
      sns.set_palette(p)
      sns.palplot(sns.color_palette())
      plt.show()
      
      
defining customer palettes

circular colors = when the data is not ordered -> sns.palplot(sns.color_palette('Paired',12))
sequential colors = when the data has a consistent range from high to low -> sns.palplot(sns.color_palette('Blues',12))
divering colors = when both the low and high values are interesting -> sns.palplot(sns.color_palette('BrBg',12))


----- sns.palplot(sns.color_palette('xxxx',number_of_color))



# Set the default Seaborn style and enable the matplotlib color codes.
sns.set(color_codes=True) ---> set default as True
# Create a distplot for the fmr_3 column using matplotlib's magenta (m) color code.
sns.distplot(df['fmr_3'], color='m')

# Show the plot
plt.show()


# Create a for loop to show the difference between the bright and colorblind palette.
for p in ['bright', 'colorblind']:
    sns.set_palette(p)
    sns.distplot(df['fmr_3'])
    plt.show()
    
    
    
    

    
Customizing with matplotlib

most customisation available through matplotlib Axes objects
Axes can be passed to seaborn functions
    
 fig,ax = plt.subplots()
 sns.distplot(df[''],ax=ax)
 ax.sett(xlabel='',)
 
 the axes objects supports many common customisations
  fig,ax = plt.subplots()
  sns.distplot(df[''],ax=ax)
  ax.sett(xlabel='',ylabel='',xlim=(0,xxxx),title ='')
  
    
 combing plots
 
# Create a plot with 1 row and 2 columns that share the y axis label
fig, (ax0, ax1) = plt.subplots(nrows=1, ncols=2, sharey=True)

# Plot the distribution of 1 bedroom apartments on ax0
sns.distplot(df['fmr_1'], ax=ax0)
ax0.set(xlabel="1 Bedroom Fair Market Rent", xlim=(100,1500))

# Plot the distribution of 2 bedroom apartments on ax1
sns.distplot(df['fmr_2'], ax=ax1)
ax1.set(xlabel="2 Bedroom Fair Market Rent", xlim=(100,1500))

# Display the plot
plt.show()
 
 
 vertical line using --- axvline --- 
# Add vertical lines for the median and mean
ax.axvline(x=median, color='m', label='Median', linestyle='--', linewidth=2)
ax.axvline(x=mean, color='b', label='Mean', linestyle='-', linewidth=2)
 
 
 
 
 
 
 
 
  #################################### Course 3: Additional Plot Types   ####################################
  
  Categorical Plot Types
 -- data which takes on a limited and fixed number of values
 
sns.stripplot(data=,y='',x='',jitter=True) -- 
     Jitter is simply the addition of a small amount of horizontal (or vertical) variability to the data in order to ensure all data points are visible.

sns.swarmplot(data=df,y='',x='')
---- swarmplot: uses a complex algorithm tto place the observarions in a manner where they are not overlap.
---- downside: the swarmplot() does not scale well to large datasets

sns.boxplot(data=df,y='',x='')

sns.violinplot(data=df,y='',x='')

sns.lvplot(data=df,y='',x='')
--- lvplot() is a hybrid between a boxplot() and violineplott() and is relatively quick to render and easy to interpret

sns.pointplot() 

sns.countplot()

















Regression Plot

sns.regplot(data=df,x='',y='',marker='+')

Evaluating regression with residplot()
--- a residual plot is useful for evaluating tthe fit of a model
--- seaborn supports through residplot() function
sns.residplot(data=df,x='',y='') --> ideally be random


polynomial regression
--- seaborn supports polynomial regression using the order paramer
sns.regplot(data=df,x='',y='',order=2)
sns.residplot(data=df,x='',y='',order=2)



Categorical values
sns.regplot(data=df,x='',y='',x_jitter=.1,order=2)



Estimators
in some cases, an x_estimattor can be useful for highlighting trends
sns.regplot(data=df,x='',y='',x_estimator=np.mean,order=2)


x_bins --> divide the data into several bins
sns.regplot(data=df,x='',y='',x_bins=4)








Matrix plots




































      
      
      
      
