https://www.youtube.com/watch?v=t8pPdKYpowI&t=1221s

print("Examples of plus sign" + str(100) + " Haha",split=' ')



---> define and call the function:
def days_to_units(n):
    print(f"{n} days are {n * 24} hours")
    print("Done!")

days_to_units(23)---> this is how we call the function!!!



Scope:
A variable is only avaiable from inside the region it is created.
-- Global scope = variables available from within any scope
-- Local scope = variables created inside function can only be used inside that function


n=int(input())
print(n+1)

--> waiting for the user's input. After giving the input value of n, python will calculate it


----------------- When should we use 'return' in a function:
------ for example:

def days_to_units(n):
    return f"{n} days are {n * 24} hours"

my_var = days_to_units(20)

print(my_var)

----------- when we want to define a variable according to the one outputted from the function, we should use 'return'


def days_to_units(n):
     return f"{n} days are {n * 24} hours"

user_input = input("Hey user, please input the value of n you want to use: \n")
print(days_to_units(user_input))

>>> 1
1 days are 111111111111111111111111 hours

the input '1' is considered as a text or a number.
----> how should we deal with this ?

def days_to_units(n):
     return f"{n} days are {n * 24} hours"

user_input = input("Hey user, please input the value of n you want to use: \n")

user_input_number = int(user_input)  -----> ADD THIS!!

print(days_to_units(user_input_number))

>>> 2
2 days are 48 hours





--- Valide user Input

[ Conditions ]

def days_to_units(n):
     if n > 0:
        return f"{n} days are {n * 24} hours"
     else:
        return "Wrong inputs"

user_input = input("Hey user, please input the value of n you want to use: \n")
user_input_number = int(user_input)
print(days_to_units(user_input_number))


------  Filter input variables:

if user_input.isdigit():   ----> .isdigit()
   user_input_number = int(user_input)
   print(days_to_units(user_input_number))
else:  # includes text and float numbers
   print("Your input is not a valid number, please input again")







----- Error Handling with Try/ Except 

Try / Except
The try block: lets you 'test' a block of code for errors
The except block: catches the error and lets you handle it

try:
  print(x)
except:
  print("An exception occurred")
  
  


def days_to_units(n):
    return f"{n} days are {n*24} hours"

def validate_and_execute():
    try:
        user_input_number = int(user_input)
        if user_input_number > 0:
           calculated_value = days_to_units(user_input_number)
           print(calculated_value)
        elif user_input_number == 0:
            print("you need to input a positive number")
    except ValueError:
        print("Your input is not a valid number, please input again")

user_input = input("Hey user, please input the value of n you want to use: \n")
validate_and_execute()


Hey user, please input the value of n you want to use: 
dst
Your input is not a valid number, please input again









----- While Loops

def days_to_units(n):
    return f"{n} days are {n*24} hours"

def validate_and_execute():
    try:
        user_input_number = int(user_input)
        if user_input_number > 0:
           calculated_value = days_to_units(user_input_number)
           print(calculated_value)
        elif user_input_number == 0:
            print("you need to input a positive number")
    except ValueError:
        print("Your input is not a valid number, please input again")
>>>>>>>>>>>>>>>>>>>
while True:
   user_input = input("Hey user, please input the value of n you want to use: \n")
   validate_and_execute()
>>>>>>>>>>>>>>>>>>>

user_input = 1 # just give a value to the user_input, it does not matter what the value is here, just let the following while loop works
while user_input != "exit":
   user_input = input("Hey user, please input the value of n you want to use: \n")
   validate_and_execute()
>>>>>>>>>>>>>>>>>>> This time, we can use input 'exit' to stop the loop








------ List and For loops

List: To store multiple items in a single variable
[]

the syntax of for is a little bit different. 
for xx in yy:


string   ---> List
'10,20,30' ---> [10,20,30]

xxx.split()






def days_to_units(n):
    return f"{n} days are {n*24} hours"

def validate_and_execute():
    try:
        user_input_number = int(n_element)  --->1. change the name used here. from user_input to n_element. Because this time, user_input will be a string
        if user_input_number > 0:
           calculated_value = days_to_units(user_input_number)
           print(calculated_value)
        elif user_input_number == 0:
            print("you need to input a positive number")
    except ValueError:
        print("Your input is not a valid number, please input again")

user_input = "" ----> 2. 
while user_input != "exit":
   user_input = input("Hey user, please input the value of n you want to use: \n")
   for n_element in  user_input.split():  ----> 3. split()
       validate_and_execute()

Hey user, please input the value of n you want to use: 
10 20 30             ---> NOTICE: the format we input is string not list. And use blankspace not comma , because the default one is blankspace.
                    if you want to input something like 10,20,30   we need to use xxx.split(',')
                                                        10/20/30.                 xxx.split('/')
10 days are 240 hours
20 days are 480 hours
30 days are 720 hours




my_list.append()






----- Set

Sets are used to store multiple items in a single variable.
Unique values inside. Does not allow duplicated values.



Nested Function Execution

print(type(set(list_of_days)))

1. set(list_of_days)
==> input: the user input array
==> output: Returns the converted Set

2. type(set(list_of_days))
==> input: the converted Set
==> output: Returns the data type of the Set

3. print(type(set(list_of_days)))
==> input: the data type
==> output: Prints the value to console
