################# Course 1: Read, clean and validate
value_counts().sort_index()
.sort_values()
-------------------------
shape : To get the number of rows and columns in a DataFrame, you can read its shape attribute.
data.shape

columns: To get the column names
data.columns

# Select the column 'birthwgt_oz1' and assign it to a new variable called ounces
ounces = data['birthwgt_oz1']
# Print the first 5 elements of ounces
print(ounces.head())



clean and validate

pounds.value_counts().sort_index()
pounds.decribe()
ounces.replace([98, 99], np.nan, inplace=True) # replaced the values 98 and 99 in the ounces column using the .replace() method:
pounds.mean()

--exercise
# Replace the value 8 with NaN
nsfg['nbrnaliv'].replace([8], np.nan, inplace=True)

# Print the values and their frequencies
print(nsfg['nbrnaliv'].value_counts())


arithmetic with series
birth_weight = pounds + pounds / 16






Filter and visualise

import matplotlib.pyplot as plt

plt.hist(birth_weight.dropna(), bins=30)
plt.xlabel()
plt.ylabel()



Boolean Series
preterm = nsfg['prglngth']<37
preterm.sum() --> For each, 1 for True and 0 for False
preterm.mean()

Filtering based on Boolean Series
preterm_weight = birth_weight[preterm]

logical operators: & , | (or)


some groups are 'oversampled':
resample_rows_weighted()




-- exercise:
# Create a Boolean Series for full-term babies
full_term = nsfg['prglngth'] >= 37

# Select the weights of full-term babies
full_term_weight = birth_weight[full_term] -- NO ''

# Compute the mean weight of full-term babies
print(full_term_weight.mean())



# Filter full-term babies
full_term = nsfg['prglngth'] >= 37

# Filter single births
single = nsfg['nbrnaliv'] == 1

# Compute birth weight for single full-term babies
single_full_term_weight = birth_weight[single & full_term]. --> how to set one than one filters
print('Single full-term mean:', single_full_term_weight.mean())

# Compute birth weight for multiple full-term babies
mult_full_term_weight = birth_weight[~single & full_term]
print('Multiple full-term mean:', mult_full_term_weight.mean())



################################# Couse 2: Distributions ###################################
PMF: probability mass function

pmf_educ = Pmf(educ,normalize=False)
pmf_edc[12] --> 47291

pmf_educ = Pmf(educ,normalize=True)
pmf_edc[12] --> 0.308294

pmf_educ.bar(label='educ')

-- exercise
# Compute the PMF for year
pmf_year = Pmf(gss['year'], normalize=False)

# Print the result
print(pmf_year)


------------------------------
Cumulative distriburion functions

cdf=Cdf(gss['age'])
cdf.plot()
plt.xlabel('age')
plt.ylabel('CDF')
plt.show()

# evaluating the CDF
q=51
p=cdf(q)
print(p) --> 0.66


# inverse CDF
 p =0.25
 q = cdf.inverse(p)
 print(q) --> 30
 

--- exercise:
cdf_age(30) ---> column: age = gss['age']

-----------
# Calculate the 75th percentile 
percentile_75th = cdf_income.inverse(0.75)

# Calculate the 25th percentile
percentile_25th = cdf_income.inverse(0.25)

# Calculate the interquartile range
iqr = percentile_75th - percentile_25th
# Print the interquartile range
print(iqr)





Comparing distributions




