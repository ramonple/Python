############################## ######## Supervised Learning with scikit-learn ###################################### 


######################################  Course 1 : Classification ###################################### 
--- Exploratory data analysis
from sklearn import datasetes
import pandas as pd
import numpy as np
importt matplotlib.pyplot as plt

plt.stylee.use('ggplot')
iris = datasets.load_iris()
type(iris)
print(iris.keys())
iris.data.shape
iris.target_names

x = iris.data
y = iris.target
df = pd.DataFrame(X, columns = iris.feature_names)
_= pd.plotting.scatter_matrix(df,c=y,figsize=[8,8],s=150,marker='o')


------ The classification challenge

-- KNN: K-Nearest Neighbors
Training a model on the data = 'fitting' a model to the datta => .fit() method
To predict the labels of new data => .predict() method

# using sickit-learn to fit a classifier
from sklearn.neighbors import KNeigoborsClassifier
knn = KNeighborsClassifier(n_neighbors = 6)
knn.fit(iris['data'],iris['target'])

# Predicting on unlabelled data
X_new = np.array( [[ 5.6,2.8,3.9,1.1],[5.3,2.5,3.6,4.5])
prediction = knn.predict(X_new)


-- exercise:
# Create arrays for the features and the response variable
y = df['party'].values
X = df.drop('party', axis=1).values

# Create a k-NN classifier with 6 neighbors: knn
knn = KNeighborsClassifier(n_neighbors = 6)

# Fit the classifier to the data
knn.fit(X,y)

# Predict the labels for the training data X
y_pred = knn.predict(X)

# Predict and print the label for the new data point X_new
new_prediction = knn.predict(X_new)
print("Prediction: {}".format(new_prediction))


-- measuring model performance
split data to two sets: training and test sets

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3, random_state 21, stratify = y)
              # random_state: like the random seed, Controls the shuffling applied to the data before applying the split.
              # stratify: If not None, data is split in a stratified fashion, using this as the class labels. 
knn=KNeighborsClassifier(n_neighbors = 8 )
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)
print(\"Test set predictions: \\n {}\".format(y_pred))
knn.score(X_test,y_test)


--- exercise
# Import necessary modules
from sklearn import datasets
import matplotlib.pyplot as plt

# Load the digits dataset: digits
digits = datasets.load_digits() ---> important

# Print the keys and DESCR of the dataset --> remember
print(digits.keys())
print(digits.DESCR)

# Print the shape of the images and data keys
print(digits.images.shape)
print(digits.data.shape)

# Display digit 1010 
# Display data as an image
plt.imshow(digits.images[1010], cmap=plt.cm.gray_r, interpolation='nearest')
plt.show()



# Import necessary modules
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

# Create feature and target arrays
X = digits.data
y = digits.target

# Split into training and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42, stratify=y)

# Create a k-NN classifier with 7 neighbors: knn
knn = KNeighborsClassifier(n_neighbors = 7)

# Fit the classifier to the training data
knn.fit(X_train,y_train)

# Print the accuracy
print(knn.score(X_test, y_test))


# use a function to caclulate the scores for different values of k

# Setup arrays to store train and test accuracies
neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))

# Loop over different values of k
for i, k in enumerate(neighbors): # You can use enumerate() in a loop in almost the same way that you use the original iterable object.
    # Setup a k-NN Classifier with k neighbors: knn
    knn = KNeighborsClassifier(n_neighbors = k)

    # Fit the classifier to the training data
    knn.fit(X_train,y_train)
    
    #Compute accuracy on the training set
    train_accuracy[i] = knn.score(X_train,y_train)

    #Compute accuracy on the testing set
    test_accuracy[i] = knn.score(X_test, y_test)

# Generate plot
plt.title('k-NN: Varying Number of Neighbors')
plt.plot(neighbors, test_accuracy, label = 'Testing Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training Accuracy')
plt.legend()
plt.xlabel('Number of Neighbors')
plt.ylabel('Accuracy')
plt.show()




######################################  Course 2: Regression ###################################### 
boston = pd.read_csv('')
# creating features and target arrays
X=boston.drop('MEDV',axis=1).values --> REMEMBER: .values
y=boston['MEDV'].values

import numpy as np
from sklearn.linear_model import LinearRegression

reg = LinearRegression()
reg.fit(X_rooms,y)
predicction_space = np.linspace(min(X_rooms),max(X_rooms)).reshape(-1,1)
plt.scatter()
plt.plot()

-- exercise
# Import numpy and pandas
import numpy as np
import pandas as pd

# Read the CSV file into a DataFrame: df
df = pd.read_csv('gapminder.csv')

# Create arrays for features and target variable
y = df['life'].values
X = df.fertility.values

# Print the dimensions of y and X before reshaping
print("Dimensions of y before reshaping: ", y.shape)
print("Dimensions of X before reshaping: ", X.shape)

# Reshape X and y
y_reshaped = y.reshape(-1,1)
X_reshaped = X.reshape(-1,1)

# Print the dimensions of y_reshaped and X_reshaped
print("Dimensions of y after reshaping: ", y_reshaped.shape)
print("Dimensions of X after reshaping: ", X_reshaped.shape)




--- The basics of linear regression
--- linear regression on all features
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

X_train,X_test,y_train,y_test = train_test_splie(X,y,test_size=0.2,random_state=42)
reg_all = LinearRegression()
reg_all.fit(X_train,y_train)
y_pred = reg_all.predict(X_test)
reg_all.score(X_test,y_test)

-----------------------------
# Import LinearRegression
from sklearn.linear_model import LinearRegression

# Create the regressor: reg
reg = LinearRegression()

# Create the prediction space
prediction_space = np.linspace(min(X_fertility), max(X_fertility)).reshape(-1,1)

# Fit the model to the data
reg.fit(X_fertility, y)

# Compute predictions over the prediction space: y_pred
y_pred = reg.predict(prediction_space)

# Print R^2 
print(reg.score(X_fertility, y))

# Plot regression line
plt.plot(prediction_space, y_pred, color='black', linewidth=3)
plt.show()

-------------------- exercise
# Import necessary modules
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error  --> this is how to calculate Mean squared error regression loss.

# Create training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=42)

# Create the regressor: reg_all
reg_all = LinearRegression()

# Fit the regressor to the training data
reg_all.fit(X_train,y_train)   ---> both X and y

# Predict on the test data: y_pred
y_pred = reg_all.predict(X_test) ---> only X

# Compute and print R^2 and RMSE
print("R^2: {}".format(reg_all.score(X_test, y_test)))
rmse = np.sqrt(mean_squared_error(y_test,y_pred))
print("Root Mean Squared Error: {}".format(rmse))






-- Cross Validation
- model performance is dependent on how the data is splited
- k-fold CV (cross validation)

from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression
reg = LinearRegression()
cv_results = cross_val_score(reg,X,y,cv=5)



--- Regularized regression
- Recall: linear regression minimises a loss function
- penalizing large coefficient: regularization

# Ridge regression in scikit-learn
from sklearn.linear_model import Ridge
X_train,X_test,y_train,x_test = train_test_split(X,y,test_size=0.2,random_state=42)
ridge = Ridge(alpha=0.1,normalize=True)
ridge.fit(X_train,y_train)
ridge_pred = ridge.predict(X_test)
ridge.score(X_test,y_test)

# Lasso regression for feature selection
from sklearn.linear_model import Lasso
names = boston.drop('MEDV', axis =1).columns
lasso = Lasso(alpha=0.1)
lasso_coef = lasso.fit(X,y).coef_
_=plt.plot(range(len(names)),lasso_coef)
_=plt.xticks(range(len(names)),names,rotation=60)


----- exercise
# Import necessary modules
from sklearn.linear_model import Ridge
from sklearn.model_selection import cross_val_score

# Setup the array of alphas and lists to store scores
alpha_space = np.logspace(-4, 0, 50)
ridge_scores = []
ridge_scores_std = []

# Create a ridge regressor: ridge
ridge = Ridge(normalize=True)

# Compute scores over range of alphas
for alpha in alpha_space:

    # Specify the alpha value to use: ridge.alpha
    ridge.alpha = alpha
    
    # Perform 10-fold CV: ridge_cv_scores
    ridge_cv_scores = cross_val_score(ridge, X, y, cv=10)
    
    # Append the mean of ridge_cv_scores to ridge_scores
    ridge_scores.append(np.mean(ridge_cv_scores))
    
    # Append the std of ridge_cv_scores to ridge_scores_std
    ridge_scores_std.append(np.std(ridge_cv_scores))

# Display the plot
display_plot(ridge_scores, ridge_scores_std)

######################################  Course 3:  Fine-tuning your model ###################################### 



######################################  Course 4: Preprocessing and pipelines ###################################### 
