############################## ######## Supervised Learning with scikit-learn ###################################### 


######################################  Course 1 : Classification ###################################### 
--- Exploratory data analysis
from sklearn import datasetes
import pandas as pd
import numpy as np
importt matplotlib.pyplot as plt

plt.stylee.use('ggplot')
iris = datasets.load_iris()
type(iris)
print(iris.keys())
iris.data.shape
iris.target_names

x = iris.data
y = iris.target
df = pd.DataFrame(X, columns = iris.feature_names)
_= pd.plotting.scatter_matrix(df,c=y,figsize=[8,8],s=150,marker='o')


------ The classification challenge

-- KNN: K-Nearest Neighbors
Training a model on the data = 'fitting' a model to the datta => .fit() method
To predict the labels of new data => .predict() method

# using sickit-learn to fit a classifier
from sklearn.neighbors import KNeigoborsClassifier
knn = KNeighborsClassifier(n_neighbors = 6)
knn.fit(iris['data'],iris['target'])

# Predicting on unlabelled data
X_new = np.array( [[ 5.6,2.8,3.9,1.1],[5.3,2.5,3.6,4.5])
prediction = knn.predict(X_new)


-- exercise:
# Create arrays for the features and the response variable
y = df['party'].values
X = df.drop('party', axis=1).values

# Create a k-NN classifier with 6 neighbors: knn
knn = KNeighborsClassifier(n_neighbors = 6)

# Fit the classifier to the data
knn.fit(X,y)

# Predict the labels for the training data X
y_pred = knn.predict(X)

# Predict and print the label for the new data point X_new
new_prediction = knn.predict(X_new)
print("Prediction: {}".format(new_prediction))


-- measuring model performance
split data to two sets: training and test sets

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3, random_state 21, stratify = y)
              # random_state: like the random seed, Controls the shuffling applied to the data before applying the split.
              # stratify: If not None, data is split in a stratified fashion, using this as the class labels. 
knn=KNeighborsClassifier(n_neighbors = 8 )
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)
print(\"Test set predictions: \\n {}\".format(y_pred))
knn.score(X_test,y_test)


--- exercise
# Import necessary modules
from sklearn import datasets
import matplotlib.pyplot as plt

# Load the digits dataset: digits
digits = datasets.load_digits() ---> important

# Print the keys and DESCR of the dataset --> remember
print(digits.keys())
print(digits.DESCR)

# Print the shape of the images and data keys
print(digits.images.shape)
print(digits.data.shape)

# Display digit 1010 
# Display data as an image
plt.imshow(digits.images[1010], cmap=plt.cm.gray_r, interpolation='nearest')
plt.show()



# Import necessary modules
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split

# Create feature and target arrays
X = digits.data
y = digits.target

# Split into training and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42, stratify=y)

# Create a k-NN classifier with 7 neighbors: knn
knn = KNeighborsClassifier(n_neighbors = 7)

# Fit the classifier to the training data
knn.fit(X_train,y_train)

# Print the accuracy
print(knn.score(X_test, y_test))


# use a function to caclulate the scores for different values of k

# Setup arrays to store train and test accuracies
neighbors = np.arange(1, 9)
train_accuracy = np.empty(len(neighbors))
test_accuracy = np.empty(len(neighbors))

# Loop over different values of k
for i, k in enumerate(neighbors): # You can use enumerate() in a loop in almost the same way that you use the original iterable object.
    # Setup a k-NN Classifier with k neighbors: knn
    knn = KNeighborsClassifier(n_neighbors = k)

    # Fit the classifier to the training data
    knn.fit(X_train,y_train)
    
    #Compute accuracy on the training set
    train_accuracy[i] = knn.score(X_train,y_train)

    #Compute accuracy on the testing set
    test_accuracy[i] = knn.score(X_test, y_test)

# Generate plot
plt.title('k-NN: Varying Number of Neighbors')
plt.plot(neighbors, test_accuracy, label = 'Testing Accuracy')
plt.plot(neighbors, train_accuracy, label = 'Training Accuracy')
plt.legend()
plt.xlabel('Number of Neighbors')
plt.ylabel('Accuracy')
plt.show()




######################################  Course 2: Regression ###################################### 
boston = pd.read_csv('')
# creating features and target arrays
X=boston.drop('MEDV',axis=1).values --> REMEMBER: .values
y=boston['MEDV'].values

import numpy as np
from sklearn.linear_model import LinearRegression

reg = LinearRegression()
reg.fit(X_rooms,y)
predicction_space = np.linspace(min(X_rooms),max(X_rooms)).reshape(-1,1)
plt.scatter()
plt.plot()

-- exercise
# Import numpy and pandas
import numpy as np
import pandas as pd

# Read the CSV file into a DataFrame: df
df = pd.read_csv('gapminder.csv')

# Create arrays for features and target variable
y = df['life'].values
X = df.fertility.values

# Print the dimensions of y and X before reshaping
print("Dimensions of y before reshaping: ", y.shape)
print("Dimensions of X before reshaping: ", X.shape)

# Reshape X and y
y_reshaped = y.reshape(-1,1)
X_reshaped = X.reshape(-1,1)

# Print the dimensions of y_reshaped and X_reshaped
print("Dimensions of y after reshaping: ", y_reshaped.shape)
print("Dimensions of X after reshaping: ", X_reshaped.shape)




--- The basics of linear regression
--- linear regression on all features
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

X_train,X_test,y_train,y_test = train_test_splie(X,y,test_size=0.2,random_state=42)
reg_all = LinearRegression()
reg_all.fit(X_train,y_train)
y_pred = reg_all.predict(X_test)
reg_all.score(X_test,y_test)

-----------------------------
# Import LinearRegression
from sklearn.linear_model import LinearRegression

# Create the regressor: reg
reg = LinearRegression()

# Create the prediction space
prediction_space = np.linspace(min(X_fertility), max(X_fertility)).reshape(-1,1)

# Fit the model to the data
reg.fit(X_fertility, y)

# Compute predictions over the prediction space: y_pred
y_pred = reg.predict(prediction_space)

# Print R^2 
print(reg.score(X_fertility, y))

# Plot regression line
plt.plot(prediction_space, y_pred, color='black', linewidth=3)
plt.show()

-------------------- exercise
# Import necessary modules
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error  --> this is how to calculate Mean squared error regression loss.

# Create training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=42)

# Create the regressor: reg_all
reg_all = LinearRegression()

# Fit the regressor to the training data
reg_all.fit(X_train,y_train)   ---> both X and y

# Predict on the test data: y_pred
y_pred = reg_all.predict(X_test) ---> only X

# Compute and print R^2 and RMSE
print("R^2: {}".format(reg_all.score(X_test, y_test)))
rmse = np.sqrt(mean_squared_error(y_test,y_pred))
print("Root Mean Squared Error: {}".format(rmse))






-- Cross Validation
- model performance is dependent on how the data is splited
- k-fold CV (cross validation)

from sklearn.model_selection import cross_val_score
from sklearn.linear_model import LinearRegression
reg = LinearRegression()
cv_results = cross_val_score(reg,X,y,cv=5)



--- Regularized regression
- Recall: linear regression minimises a loss function
- penalizing large coefficient: regularization

# Ridge regression in scikit-learn
from sklearn.linear_model import Ridge
X_train,X_test,y_train,x_test = train_test_split(X,y,test_size=0.2,random_state=42)
ridge = Ridge(alpha=0.1,normalize=True)
ridge.fit(X_train,y_train)
ridge_pred = ridge.predict(X_test)
ridge.score(X_test,y_test)

# Lasso regression for feature selection
from sklearn.linear_model import Lasso
names = boston.drop('MEDV', axis =1).columns
lasso = Lasso(alpha=0.1)
lasso_coef = lasso.fit(X,y).coef_
_=plt.plot(range(len(names)),lasso_coef)
_=plt.xticks(range(len(names)),names,rotation=60)


----- exercise
# Import necessary modules
from sklearn.linear_model import Ridge
from sklearn.model_selection import cross_val_score

# Setup the array of alphas and lists to store scores
alpha_space = np.logspace(-4, 0, 50)
ridge_scores = []
ridge_scores_std = []

# Create a ridge regressor: ridge
ridge = Ridge(normalize=True)

# Compute scores over range of alphas
for alpha in alpha_space:

    # Specify the alpha value to use: ridge.alpha
    ridge.alpha = alpha
    
    # Perform 10-fold CV: ridge_cv_scores
    ridge_cv_scores = cross_val_score(ridge, X, y, cv=10)
    
    # Append the mean of ridge_cv_scores to ridge_scores
    ridge_scores.append(np.mean(ridge_cv_scores))
    
    # Append the std of ridge_cv_scores to ridge_scores_std
    ridge_scores_std.append(np.std(ridge_cv_scores))

# Display the plot
display_plot(ridge_scores, ridge_scores_std)

######################################  Course 3:  Fine-tuning your model ###################################### 
from sklearn.metrics import classficiation_report
from sklearn.metrics import confusion_matrix

confusion_matrix(y_test,y_pred)
classfication_report(y_test,y_pred)
---------------------------------------------------------
How good is your model?

- imbalance 
(confusion matrix)
precision = tp/(tp+fp)
recall: tp/(tp+fn)
f1 score = precision * recall / (precision + recall)

from sklearn.metrics import classficiation_report
from sklearn.metrics import confusion_matrix
knn=KNeighborsClassifier(n_neighbors = 8)
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)
knn.fit(X_train,y_train)
y_pred = knn.predict(X_test)

confusion_matrix(y_test,y_pred)

classfication_report(y_test,y_pred)



----- Logistic regression and the ROC curve
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
logreg = LogisticRegression()
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)
logreg.fit(X_train,y_train)
y_pred = knn.predict(X_test)

# probability threshold (default = 0.5)
-- The ROC curve (x:false positive rate vs y: true positive rate)

from sklearn.metrics import roc_curve

y_pred_prob = logreg.predict_proba(X_test)[:,1]
# Generate ROC curve values: fpr, tpr, thresholds
fpr,tpr,thresholds = roc_curve (y_test,y_pred_prob)

plt.plot([0,1],[0,1],'k--')
plt.plot(fpr,tpr,label='Logistic Regression')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.titlte('Logistic Regression ROC curve')




------ Area under the ROC curve (AUC)
--> 1. AUC in scikit-learn
from sklearn.metrics import roc_auc_score
logreg = LogisticRegression()
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2, random_state = 42)
logreg.fit(X_train,y_train)
y_pred_prob = logreg.predict_proba(X_test)[:,1]
roc_auc_score(y_test,y_pred_prob)

--> 2. AUC using cross-validation
from sklearn.model_selection import cross_val_score
cv_scores = cross_val_score (logreg,X,y,cv=5,scoring ='roc_auc')




----- Hyperparameter tuning
-> Linear regression: Choosing parameters
-> Lasso/Ridge regression: Choosing alpha
-> k_Neighbors: Choosing n neighbors
[ hyperparameters cannot be learnt by fitting the model ]

How to: try a bunch of different hyperparameters, fit all of them separately, choose the best performing one


# GridSearchCV in sickit-learn
from sklearn.model_selection import GridSearchCV
param_grid = { 'n_neighbors':np.arrange(1,50) }
knn = KNeighborsClassifier()
knn_cv = GridSearchCV(knn,param_grid,cv=5)
knn_cv.fit(X,y)
knn_cv.best__params_
knn_cv.best_score_


# 
# Import necessary modules
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV

# Setup the hyperparameter grid
c_space = np.logspace(-5, 8, 15)
param_grid = {'C': c_space}

# Instantiate a logistic regression classifier: logreg
logreg = LogisticRegression()

# Instantiate the GridSearchCV object: logreg_cv
logreg_cv = GridSearchCV(logreg, param_grid, cv=5)

# Fit it to the data
logreg_cv.fit(X,y)

# Print the tuned parameters and score
print("Tuned Logistic Regression Parameters: {}".format(logreg_cv.best_params_)) 
print("Best score is {}".format(logreg_cv.best_score_))



### Hyperparameter tuning with RandomizedSearchCV

# Import necessary modules
from scipy.stats import randint
from sklearn.model_selection import RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier

# Setup the parameters and distributions to sample from: param_dist
param_dist = {"max_depth": [3, None],
              "max_features": randint(1, 9),
              "min_samples_leaf": randint(1, 9),
              "criterion": ["gini", "entropy"]}

# Instantiate a Decision Tree classifier: tree
tree = DecisionTreeClassifier()

# Instantiate the RandomizedSearchCV object: tree_cv
tree_cv = RandomizedSearchCV(tree, param_dist, cv=5)

# Fit it to the data
tree_cv.fit(X,y)

# Print the tuned parameters and score
print("Tuned Decision Tree Parameters: {}".format(tree_cv.best_params_))
print("Best score is {}".format(tree_cv.best_score_))





---- Hold-out set for final evaluation
- how well can the model perform on never before seen data
- using all data for cross-validation is not ideal
- thus, we need to split data in the beginning: training vs test
- perform grid search cross-validation on training set
- choose the hyperparameters and evaluate on hold-out set


------------------ Hold-out set in practice I: Classification
# Import necessary modules
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import GridSearchCV

# Create the hyperparameter grid
c_space = np.logspace(-5, 8, 15)
param_grid = {'C': c_space, 'penalty': ['l1', 'l2']}

# Instantiate the logistic regression classifier: logreg
logreg = LogisticRegression()

# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.4,random_state = 42)

# Instantiate the GridSearchCV object: logreg_cv
logreg_cv = GridSearchCV(logreg,param_grid,cv=5)

# Fit it to the training data
logreg_cv.fit(X_train,y_train)

# Print the optimal parameters and best score
print("Tuned Logistic Regression Parameter: {}".format(logreg_cv.best_params_))
print("Tuned Logistic Regression Accuracy: {}".format(logreg_cv.best_score_))

----------- Hold-out set in practice II: Regression
# Import necessary modules
from sklearn.linear_model import ElasticNet
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split

# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.4, random_state=42)

# Create the hyperparameter grid
l1_space = np.linspace(0, 1, 30)
param_grid = {'l1_ratio': l1_space}

# Instantiate the ElasticNet regressor: elastic_net
elastic_net = ElasticNet()

# Setup the GridSearchCV object: gm_cv
gm_cv = GridSearchCV(elastic_net, param_grid, cv=5)

# Fit it to the training data
gm_cv.fit(X_train, y_train)

# Predict on the test set and compute metrics
y_pred = gm_cv.predict(X_test)

##### remember how to calculate R2 and mse ####
r2 = gm_cv.score(X_test, y_test)
mse = mean_squared_error(y_test, y_pred)

print("Tuned ElasticNet l1 ratio: {}".format(gm_cv.best_params_))
print("Tuned ElasticNet R squared: {}".format(r2))
print("Tuned ElasticNet MSE: {}".format(mse))



######################################  Course 4: Preprocessing and pipelines ###################################### 
-- Preprocessing data

Dealing with categorical features
- sklearn will not accept by default, needs to deal with

dummy variables: 0, 1

sklearn: OneHotEncoder()
pandas: get_dummies()

import pandas as pd
df=pd.read_csv('xxx')
df_origin=pd.get_dummies(df)
df_origin=df_origin.drop('origin_Asia',axis=1)

df.boxplot('life', by='Region', rot=60) --> group by 'region'

---------------- exercise
# Create dummy variables: df_region
df_region = pd.get_dummies(df)

# Print the columns of df_region
print(df_region.columns)

# Drop 'Region_America' from df_region
# drop_first=True to drop the unneeded dummy variable
df_region = pd.get_dummies(df, drop_first=True)

# Print the new columns of df_region
print(df_region.columns)

----------------- exercise
# Import necessary modules
from sklearn.linear_model import Ridge
from sklearn.model_selection import cross_val_score

# Instantiate a ridge regressor: ridge
ridge = Ridge(alpha=0.5,normalize=True)

# Perform 5-fold cross-validation: ridge_cv
ridge_cv = cross_val_score(ridge,X,y,cv=5)

# Print the cross-validated scores
print(ridge_cv)




------------- Handling missing data
# drop missing data
df.dropna()

# imputing missing values
from sklearn.preprocessing import Imputer
imp = Imputer(missing_values ='NaN',strategy='mean',axis=0)
imp.fit(X)
X=imp.transform(X)

# Imputing within a pipeline
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import Imputer
imp = Imputuer(missing_values='NaN',strategy='mean',axis=0)
logreg = LogisticRegression()
steps =[ ('imputation',imp),('logistic_regression',logreg)]
pinpeline = Pipeline(steps)
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

pipeline.fit(X_train,y_train)
y_pred = pipeline.predict(X_test)
pipeline.score(X_test,y_test)


# Convert '?' to NaN
df[df == '?'] = np.nan

# Print the number of NaNs
print(df.isnull().sum())

# Print shape of original DataFrame
print("Shape of Original DataFrame: {}".format(df.shape))

# Drop missing values and print shape of new DataFrame
df = df.dropna()

# Print shape of new DataFrame
print("Shape of DataFrame After Dropping All Rows with Missing Values: {}".format(df.shape))


-------------- SVC ---------------------
# Import the Imputer module
from sklearn.preprocessing import Imputer
from sklearn.svm import SVC

# Setup the Imputation transformer: imp
imp = Imputer(missing_values='NaN', strategy='most_frequent', axis=0)

# Instantiate the SVC classifier: clf
clf = SVC()

# Setup the pipeline with the required steps: steps
steps = [('imputation', imp),
        ('SVM', clf)]
        
# Create the pipeline: pipeline
pipeline = Pipeline(steps)

# Create training and test sets
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=42)

# Fit the pipeline to the train set
pipeline.fit(X_train,y_train)

# Predict the labels of the test set
y_pred = pipeline.predict(X_test)

# Compute metrics
print(classification_report(y_test,y_pred))        



------------- Centering and scaling
Why scale a data?  we want to be on a similar scale

# scaling in scikit-learn
from sklearn.preprocessing import scale
X_scaled = scale(X)

# Scaling in a pipeline
from sklearn.preprocessing import StandardScaler
steps = [ ('scaler', StandardScaler()) , ('knn', KNeighborsClassifier()) ]
pipeline = Pipeline(steps)
X_train,X_test,y_train,y_test = train_test_splitt(X,y,test_size=0.2,random_state=21)
knn_scaled = pipeline.predict(X_test)
accuracy_score(y_test,y_pred)
knn_unscaled = KNeighborsClassifier().fit(X_train,y_train)
knn_unscaled.score(X_test,y_test)


# CV and scaling in a pipeline
steps = [ ('sclaer',StandardScaler()), ('knn',KNeighborsClassifier()) ]
pipeline = Pipeline(steps)
parameters = {knn__n_neighbors: np.arange(1,50)}
X_train,X_test,y_train,y_test = train_test_splitt(X,y,test_size=0.2,random_state=21)
cv=GridSearchCV(pipeline,param_grid = parameters)
cv.fit(X_train,y_train)
y_pred = cv.predict(X_test)


----------------- exercise -------------------------
# Import the necessary modules
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

# Setup the pipeline steps: steps
steps = [('scaler', StandardScaler()),
        ('knn', KNeighborsClassifier())]
        
# Create the pipeline: pipeline
pipeline = Pipeline(steps)

# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=42)

# Fit the pipeline to the training set: knn_scaled
knn_scaled = pipeline.fit(X_train,y_train)

# Instantiate and fit a k-NN classifier to the unscaled data
knn_unscaled = KNeighborsClassifier().fit(X_train, y_train)

# Compute and print metrics
print('Accuracy with Scaling: {}'.format(knn_scaled.score(X_test,y_test)))
print('Accuracy without Scaling: {}'.format(knn_unscaled.score(X_test,y_test)))

----------------- exercise 
# Setup the pipeline
steps = [('scaler', StandardScaler()), ('SVM', SVC())]

pipeline = Pipeline(steps)

# Specify the hyperparameter space
parameters = {'SVM__C':[1, 10, 100], 'SVM__gamma':[0.1, 0.01]}

# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=21)

# Instantiate the GridSearchCV object: cv
cv = GridSearchCV(pipeline,parameters,cv=3)

# Fit to the training set
cv.fit(X_train,y_train)

# Predict the labels of the test set: y_pred
y_pred = cv.predict(X_test)

# Compute and print metrics
print("Accuracy: {}".format(cv.score(X_test, y_test)))
print(classification_report(y_test, y_pred))
print("Tuned Model Parameters: {}".format(cv.best_params_))

--------------------------------------------------
# Setup the pipeline steps: steps
steps = [('imputation', Imputer(missing_values='NaN', strategy='mean', axis=0)),
         ('scaler', StandardScaler()),
         ('elasticnet', ElasticNet())]

# Create the pipeline: pipeline 
pipeline = Pipeline(steps)

# Specify the hyperparameter space
parameters = {'elasticnet__l1_ratio':np.linspace(0,1,30)}

# Create train and test sets
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.4,random_state=42)

# Create the GridSearchCV object: gm_cv
gm_cv = GridSearchCV(pipeline,parameters,cv=3)

# Fit to the training set
gm_cv.fit(X_train,y_train)

# Compute and print the metrics
r2 = gm_cv.score(X_test, y_test)
print("Tuned ElasticNet Alpha: {}".format(gm_cv.best_params_))
print("Tuned ElasticNet R squared: {}".format(r2))





