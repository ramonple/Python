
------------ Cleaning Data
<      https://www.youtube.com/watch?v=8A7L0GsBiLQ       >


identifying and dealing with Missing Data

df["column"].unique()
# we can see whether there exists unpredicted data. like we want sex = 1 or 0, but we have sex = 3.

len(df.loc [ ( df["columnA"] == 0) |( df["columnB"] == 0 )| ( df["columnC"]==0 ) ]) 
# we want to see how many rows contain missing values

len(df)
# check the number of rows for the dataset.

df_no_missing = df.loc [ ( df["columnA"] != 0 ) & ( df["columnB"] != 0 ) & ( df["columnC"]!=0 ) ] 



-- One-Hot Encoding (can also refer to the folder 'Machine Learning Notebook - Jupyter: Linear Regression'

Two popular methods:
ColumnTransformer (from scikit-learn)
get_dummies (from pandas)

pd.get_dummies(X,columns=['Marriage']).head()
---> we will have three columns: marriage_1, marriage_2, marriage_3 (each column contains 1 or 0 )













------------------ Python While Loops (break) (continue) ------------------

break:
With the break statement we can stop the loop even if the while condition is true:

i = 1 # The while loop requires relevant variables to be ready
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1
  
  
continue:
With the continue statement we can stop the current iteration, and continue with the next:

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)


------------------ Python Try Except ------------------
Try:
Except:
Else:
Finally:

The try block lets you test a block of code for errors.
The except block lets you handle the error.
The else block lets you execute code when there is no error.
The finally block lets you execute code, regardless of the result of the try- and except blocks.

# Many Exceptions
try:
  print(x)
except NameError:
  print("Variable x is not defined")
except:
  print("Something else went wrong")
  
  
# Else
You can use the else keyword to define a block of code to be executed if no errors were raised
try:
  print("Hello")
except:
  print("Something went wrong")
else:
  print("Nothing went wrong")
  
>>> 
Hello
Nothing went wrong

# Finally
try:
  print(x)
except:
  print("Something went wrong")
else:
  print("Just have a look")
finally:
  print("The 'try except' is finished")


>>>
Something went wrong
The 'try except' is finished

------------------ Function ------------------------
print:
can be used to print anything, for example the one from the other function
To print a value in Python, you call the print() function. 

return:
when we want to define a variable according to the one outputted from the function, we should use 'return'
Returning is used to return a value from a function and exit the function.


------------- Python Lambda -------------
lambda arguments : expression

A lambda function can take any number of arguments, but can only have one expression.

x = lambda a: a+10
print(x(5))

x = lambda a, b : a * b
print(x(5, 6))

x = lambda a, b, c : a + b + c
print(x(5, 6, 2))



Why Use Lambda Functions?
The power of lambda is better shown when you use them as an anonymous function inside another function.


def myfunc(n):
  return lambda a : a * n

mydoubler = myfunc(2)

print(mydoubler(11))





------------- Python Classes and Objects -------------
Almost everything in Python is an object, with its properties and methods.
A Class is like an object constructor, or a "blueprint" for creating objects. Classes provide a means of bundling data and functionality together. 


# Create a Class
class MyClass: >>>>> No ()
  x = 5
print(MyClass)
>>
<class '__main__.MyClass'>

# Create Object
p1 = MyClass()
print(p1.x)
>> 5


---###  The __init__() Function -----#####
The examples above are classes and objects in their simplest form, and are not really useful in real life applications.
To understand the meaning of classes we have to understand the built-in __init__() function.
All classes have a function called __init__(), which is always executed when the class is being initiated.
Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:


# Example: Create a class named Person, use the __init__() function to assign values for name and age:

class Person: >>>>> No ()
  def __init__(self, name, age):
    self.name = name
    self.age = age

p1 = Person("John", 36) # here we should use (), e.g., p1=Myclass()

print(p1.name)
print(p1.age)

### The __init__() function is called automatically every time the class is being used to create a new object.

__init__ (self,x,x) # the self variable represents the instance of the object itself 
                   # Most object-oriented languages pass this as a hidden parameter to the methods defined on an object; Python does not
                   



--- Object Methods
# Insert a function that prints a greeting, and execute it on the p1 object:

class Person:   >>>>> No ()
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)
p1.myfunc() >>> Hello my name is John
print(p1.age) >>> 36
print(p1.name) >>> John



--- The self method:
# Use the words mysillyobject and abc instead of self:

class Person:
  def __init__(mysillyobject, name, age): >> there is 'mysillyobject' not the previous 'self'
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()

>>> Hello my name is John




------------------ Python Inheritance ------------------ 
Inheritance allows us to define a class that inherits all the methods and properties from another class.

Parent class is the class being inherited from, also called base class.

Child class is the class that inherits from another class, also called derived class.


# Create a parent class
    Any class can be a parent class, so the syntax is the same as creating any other class:

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()



# Create a Child Class

class Student(Person): # call the parent class
  pass       # Note: Use the pass keyword when you do not want to add any other properties or methods to the class.
  



In total :

class Person:
  def __init__(self,fname,lname):
    self.firstname=fname
    self.lastname=lname
  def printname(self):
    print(self.firstname,self.lastname)

class child(Person):
      pass

x = child("mike","Wodd")
x.printname()

>> mike Wodd




--- Add __init__ in children class:

class Student(Person):
  def __init__(self, fname, lname):
    # Note: The child's __init__() function overrides the inheritance of the parent's __init__() function.
    # When you add the __init__() function, the child class will no longer inherit the parent's __init__() function.

# To keep the inheritance of the parent's __init__() function, add a call to the parent's __init__() function:
class Student(Person):
  def __init__(self, fname, lname):
    Person.__init__(self, fname, lname)


in total:

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

class Student(Person):
  def __init__(self, fname, lname):
    Person.__init__(self, fname, lname)

x = Student("Mike", "Olsen")
x.printname()




--- Use the super() Function
# Python also has a super() function that will make the child class inherit all the methods and properties from its parent:

class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    # By using the super() function, you do not have to use the name of the parent element, it will automatically inherit the methods and properties from its parent.    
    
 
 --- Add properties
 # Add a property called graduationyear to the Student class:
 class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019


## code:
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

class Student(Person):
  def __init__(self, fname, lname):
    super().__init__(fname, lname)
    self.graduationyear = 2019
    
    # In the example below, the year 2019 should be a variable, and passed into the Student class when creating student objects. To do so, add another parameter in the __init__() function:

x = Student("Mike", "Olsen", 2019)
print(x.graduationyear)
>>> 2019
x.printname() >>> Mike Olsen



--- Add Methods
# Add a method called welcome to the Student class:

class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname) ---> should use () in super().
    self.graduationyear = year

  def welcome(self):
    print("Welcome", self.firstname, self.lastname, "to the class of", self.graduationyear)
    
    
    
#######  in total: ##########################################################################################
  
# parent class, first define __init__ and then define pritname. __init__ has three variables, pritname(self)  
class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

# children class, first define __init__ and then define welcome. Where __init__has 4 variables and __init__(self)
                  the parent class is called within __init__, through super().__init__(NO SELF)
class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

  def welcome(self):
    print("Welcome", self.firstname, self.lastname, "to the class of", self.graduationyear)

x = Student("Mike", "Olsen", 2019)
x.welcome() --> always call the last defined function


>>> Welcome Mike Olsen to the class of 2019

#########################################################################################################


------------------------- Iterators ------------------------

An iterator is an object that contains a countable number of values.
Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().


-- 1. iterator vs iterable
Lists, tuples, dictionaries, and sets are all iterable objects. They are iterable containers which you can get an iterator from.
All these objects have a iter() method which is used to get an iterator:

inter()
# Return an iterator from a tuple, and print each value:
mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)
print(next(myit))
print(next(myit))
print(next(myit))
/ OR
mytuple = ("apple", "banana", "cherry")
for x in mytuple:
  print(x)
>>>>
apple
banana
cherry

# Even strings are iterable objects, and can return an iterator:
mystr = "banana"
myit = iter(mystr)
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
/ OR 
mystr = "banana"
for x in mystr:
  print(x)
>>>
b
a
n
a
n
a


--- Create an Iterator

__iter__() 
__next__()


example:
# Create an iterator that returns numbers, starting with 1, and each sequence will increase by one (returning 1,2,3,4,5 etc.)

class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self): # __next__(self) is also a in-built function
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))


>>>
1
2
3
4
5





---- StopIteration

class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumbers()
myiter = iter(myclass)

for x in myiter:
  print(x)
  
 >>>
1
2
3
4
5


-------- Scope 
A variable is only available from inside the region it is created. This is called scope.

# set global function: global 

x = 300

def myfunc():
  global x
  x = 200

myfunc()

print(x)

>>> 200



-------- Modules 组件
What is a Module?
Consider a module to be the same as a code library.
A file containing a set of functions you want to include in your application.


1. To create a module just save the code you want in a file with the file extension .py:
def greeting(name):
  print("Hello, " + name)

2. import a module

import mymodule as xxx
xxx.greeting("Jonathan")


3. dir()
# List all the defined names belonging to the platform module:
import platform
x = dir(platform)
print(x)




--------------- Date time

import datetime as dt

x = dt.datetime.now()
print(x)
print(x.year)
print(x.month)
print(x.day)
print(x.strftime("%A")) --> Sunday # return a string representing the date
print(x.strftime("%B%)) --> June
print(x.weekday()) --> 6 # Return the day of the week as an integer, where Monday is 0 and Sunday is 6.
print(x.isoweekday()) --> 7 # Return the day of the week as an integer, where Monday is 1 and Sunday is 7.



create a date object:

import datetime
x = datetime.datetime(2020,5,14)
print(x)



.strftime (string, format, time)
Directive	Description	Example	Try it
%a	Weekday, short version	Wed	
%A	Weekday, full version	Wednesday	
%w	Weekday as a number 0-6, 0 is Sunday	3	
%d	Day of month 01-31	31	
%b	Month name, short version	Dec	
%B	Month name, full version	December	
%m	Month as a number 01-12	12	
%y	Year, short version, without century	18	
%Y	Year, full version	2018	
%H	Hour 00-23	17	
%I	Hour 00-12	05	
%p	AM/PM	PM	
%M	Minute 00-59	41	
%S	Second 00-59	08	
%f	Microsecond 000000-999999	548513	
%z	UTC offset	+0100	
%Z	Timezone	CST	
%j	Day number of year 001-366	365	
%U	Week number of year, Sunday as the first day of week, 00-53	52	
%W	Week number of year, Monday as the first day of week, 00-53	52	
%c	Local version of date and time	Mon Dec 31 17:41:00 2018	
%C	Century	20	
%x	Local version of date	12/31/18	
%X	Local version of time	17:41:00	
%%	A % character	%	
%G	ISO 8601 year	2018	
%u	ISO 8601 weekday (1-7)	1	
%V	ISO 8601 weeknumber (01-53)	01	






