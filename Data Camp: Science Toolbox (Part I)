######################################### Course 1: 1 Writing your own functions #########################################

User-defined functions

built-in function: str()

defining a function:
def square(value):
    new_value = value ** 2
    # print(new_value)
    return new_value

num = square(4)
print(num)

Docstrings:
- docstrings describe what your function does,""" """

 def square(value):
    """ Return the square of a value. """
    new_value = value ** 2
    return new_value
    
    
# Define the function shout
def shout():
    """Print a string with three exclamation marks"""
    # Concatenate the strings: shout_word
    shout_word = 'congratulations' + '!!!'

    # Print shout_word
    print(shout_word)
    


# Define shout with the parameter, word
def shout(word):
    """Return a string with three exclamation marks"""
    # Concatenate the strings: shout_word
    shout_word = word + '!!!'
    return  shout_word
    
    # Replace print with return
    print(shout_word)

# Pass 'congratulations' to shout: yell
yell=shout('congratulations')

# Print yell
print(yell)

-- Should notice how to use the Return in function.
-------- First we need to define the corresponding variable (like shout_word in this example), then return it.






Multiple parameters and return values
- accept more than 1 parameter

def raise_to_power(value1,value2)
    """ Raise value 1 to the power of value 2."""
    new_value =value1 ** value2
    return new_value

result =raise_to_power(2,3)


A quick jump to tuples
- Tuples:
    like a list - can contain multiple values
    immutable - cannot modify values
    constructed using parenthese ()
    
# unpacking a tuple into several variables:
a,b,c=even_nums
# construct a new tuple named even_nums:
even_nums= (2,4,6)

print(a) or print(even_nums[1])


def raise_to_power(value1,value2)
    """ Raise value 1 to the power of value 2 and vice versa.""" 
    
    new_value1 = value1 ** value2
    new_value2 = value2 ** value1
    
    new_tuple = (new_value1,new_value2)
    
    return new_tuple
    
result = raise_power(2,3)    
    
    
    
    
# Define shout with parameters word1 and word2
def shout(word1, word2):
    """Concatenate strings with three exclamation marks"""
    # Concatenate word1 with '!!!': shout1
    shout1 = word1 + '!!!'
    
    # Concatenate word2 with '!!!': shout2
    shout2 = word2 + '!!!'
    
    # Concatenate shout1 with shout2: new_shout
    new_shout = shout1 + shout2. -- can directly add these two

    # Return new_shout
    return new_shout


Unpack tuples !!!
# Unpack nums into num1, num2, and num3
num1, num2, num3 = nums
# Construct a new tuple, even_nums composed of the same elements in nums, but with the 1st element replaced with the value, 2.
even_nums = (2, num2, num3)




# Define shout_all with parameters word1 and word2
def shout_all(word1, word2):
    """Return a tuple of strings"""
    # Concatenate word1 with '!!!': shout1
    shout1 = word1 + '!!!'
    
    # Concatenate word2 with '!!!': shout2
    shout2 = word2 + '!!!'
    
    # Construct a tuple with shout1 and shout2: shout_words
    shout_words = (shout1, shout2)

    # Return shout_words
    return shout_words

# Pass 'congratulations' and 'you' to shout_all(): yell1, yell2
yell1, yell2 = shout_all('congratulations', 'you') -- NOTICE!!!

# Print yell1 and yell2
print(yell1)
print(yell2)








