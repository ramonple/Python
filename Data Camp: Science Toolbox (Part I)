######################################### Course 1:  Writing your own functions #########################################

User-defined functions

built-in function: str()

defining a function:
def square(value):
    new_value = value ** 2
    # print(new_value)
    return new_value

num = square(4)
print(num)

Docstrings:
- docstrings describe what your function does,""" """

 def square(value):
    """ Return the square of a value. """
    new_value = value ** 2
    return new_value
    
    
# Define the function shout
def shout():
    """Print a string with three exclamation marks"""
    # Concatenate the strings: shout_word
    shout_word = 'congratulations' + '!!!'

    # Print shout_word
    print(shout_word)
    


# Define shout with the parameter, word
def shout(word):
    """Return a string with three exclamation marks"""
    # Concatenate the strings: shout_word
    shout_word = word + '!!!'
    return  shout_word
    
    # Replace print with return
    print(shout_word)

# Pass 'congratulations' to shout: yell
yell=shout('congratulations')

# Print yell
print(yell)

-- Should notice how to use the Return in function.
-------- First we need to define the corresponding variable (like shout_word in this example), then return it.






Multiple parameters and return values
- accept more than 1 parameter

def raise_to_power(value1,value2)
    """ Raise value 1 to the power of value 2."""
    new_value =value1 ** value2
    return new_value

result =raise_to_power(2,3)


A quick jump to tuples
- Tuples:
    like a list - can contain multiple values
    immutable - cannot modify values
    constructed using parenthese ()
    
# unpacking a tuple into several variables:
a,b,c=even_nums
# construct a new tuple named even_nums:
even_nums= (2,4,6)

print(a) or print(even_nums[1])


def raise_to_power(value1,value2)
    """ Raise value 1 to the power of value 2 and vice versa.""" 
    
    new_value1 = value1 ** value2
    new_value2 = value2 ** value1
    
    new_tuple = (new_value1,new_value2)
    
    return new_tuple
    
result = raise_power(2,3)    
    
    
    
    
# Define shout with parameters word1 and word2
def shout(word1, word2):
    """Concatenate strings with three exclamation marks"""
    # Concatenate word1 with '!!!': shout1
    shout1 = word1 + '!!!'
    
    # Concatenate word2 with '!!!': shout2
    shout2 = word2 + '!!!'
    
    # Concatenate shout1 with shout2: new_shout
    new_shout = shout1 + shout2. -- can directly add these two

    # Return new_shout
    return new_shout


Unpack tuples !!!
# Unpack nums into num1, num2, and num3
num1, num2, num3 = nums
# Construct a new tuple, even_nums composed of the same elements in nums, but with the 1st element replaced with the value, 2.
even_nums = (2, num2, num3)




# Define shout_all with parameters word1 and word2
def shout_all(word1, word2):
    """Return a tuple of strings"""
    # Concatenate word1 with '!!!': shout1
    shout1 = word1 + '!!!'
    
    # Concatenate word2 with '!!!': shout2
    shout2 = word2 + '!!!'
    
    # Construct a tuple with shout1 and shout2: shout_words
    shout_words = (shout1, shout2)

    # Return shout_words
    return shout_words

# Pass 'congratulations' and 'you' to shout_all(): yell1, yell2
yell1, yell2 = shout_all('congratulations', 'you') -- NOTICE!!!

# Print yell1 and yell2
print(yell1)
print(yell2)



--- Bring it all together


# Import pandas
import pandas as pd

# Import Twitter data as DataFrame: df
df = pd.read_csv('tweets.csv')

# Initialize an empty dictionary: langs_count
langs_count = {}

# Extract column from DataFrame: col
col = df['lang']

# Iterate over lang column in DataFrame
for entry in col:

    # If the language is in langs_count, add 1
    if entry in langs_count.keys():
        langs_count[entry] += 1. # notice: langs_count[entry]
    # Else add the language to langs_count, set the value to 1
    else:
        langs_count[entry] = 1

# Print the populated dictionary
print(langs_count)




# Define count_entries()
def count_entries(df, col_name):
    """Return a dictionary with counts of 
    occurrences as value for each key."""

    # Initialize an empty dictionary: langs_count
    langs_count = {}
    
    # Extract column from DataFrame: col
    col = df[col_name]

    # Iterate over lang column in DataFrame
    for entry in col:

        # If the language is in langs_count, add 1
        if entry in langs_count.keys():
            langs_count[entry] += 1
        # Else add the language to langs_count, set the value to 1
        else:
            langs_count[entry] = 1

    # Return the langs_count dictionary
    return langs_count

# Call count_entries(): result
result = count_entries(tweets_df, 'lang')

# Print the result
print(result)




######################################### Course 2: Default arguments, variable-length arguments and scope #########################################

Scope and user-defined functions
- not all objects are accessible everywhere in a script
- scope - part of the program where an object or name may be accessible
   Global scope
   Local scope
   built-in scope (e.g., sum() )


   
# Create a string: team
team = "teen titans"

# Define change_team()
def change_team():
    """Change the value of the global variable team."""

    # Use team in global scope
    global team

    # Change the value of team in global: team
    team  = "justice league"
# Print team
print(team)

# Call change_team()
change_team()

# Print team
print(team)
-- teen titans
   justice league




----------  Nested functions ----------

def outer(...):
    """ ..... """
    x = ...
    
    def inner (...):
         """ ..... """
         y= x ** 2
    return
    
    
(2):    
def mod2pluts5(x1,x2,x3):
    "" Return the remainder plus 5 of three values. """
    
    new_x1 = x1 % 2 + 5
    new_x2 = x2 % 2 + 5
    new_x3 = x3 % 2 + 5
    
    return (new_x1,new_x2,new_x3)
    

(3);
def mod2plus(x1,x2,x3):
    "" Return the remainder plus 5 of three values. """
    
    def inner(x):
         "" Return the remainder plus 5 of three values. """
         return x %2 + 5
    return (inner(new_x1),inner(new_x2),inner(new_x3))
    
    
print(inner(x1),inner(x2),inner(x3))

    

returning functions:

def raise_val(n):
    "" Return the remainder plus 5 of three values. """
    
    def inner(x):
         "" Return the remainder plus 5 of three values. """
         raised x ** n
         return raised
         
    return inner
    
square = raise_val(2)
cube = raise_val(3)
print(square(2),cube(4)) --> 4 64


Using nonlocal

def outer():
    """ prints the value of n."""
    n = 1
    
    def inner():
        nonlocal n
        n = 2
        print(n)
        
    inner()
    print(n)

outer() --> 2
            2
       
 


Compare outer, inner and global:

1. Compare this, without using nonlocal:

x = 0
def outer():
    x = 1
    def inner():
        x = 2
        print("inner:", x)

    inner()
    print("outer:", x)

outer()
print("global:", x)

# inner: 2
# outer: 1
# global: 0



2. To this, using nonlocal, where inner()'s x is now also outer()'s x:

x = 0
def outer():
    x = 1
    def inner():
        nonlocal x
        x = 2
        print("inner:", x)

    inner()
    print("outer:", x)

outer()
print("global:", x)

# inner: 2
# outer: 2
# global: 0



3. If we were to use global, it would bind x to the properly "global" value:

x = 0
def outer():
    x = 1
    def inner():
        global x
        x = 2
        print("inner:", x)

    inner()
    print("outer:", x)

outer()
print("global:", x)

# inner: 2
# outer: 1
# global: 2



# Define echo_shout()
def echo_shout(word):
    """Change the value of a nonlocal variable"""
    
    # Concatenate word with itself: echo_word
    echo_word = word*2
    
    # Print echo_word
    print(echo_word)
    
    # Define inner function shout()
    def shout():
        """Alter a variable in the enclosing scope"""    
        # Use echo_word in nonlocal scope
        nonlocal echo_word
        
        # Change echo_word to echo_word concatenated with '!!!'
        echo_word = echo_word + '!!!'
    
    # Call function shout()
    shout()
    
    # Print echo_word
    print(echo_word)

# Call function echo_shout() with argument 'hello'
echo_shout('hello')

<script.py> output:
    hellohello
    hellohello!!!
    
    
 



Default and flexible arguments


add a default argument

def power(number,power=1):
    """ raise number to the power of pow."""
    new_value = number ** pow
    return new_value
    
 power(9,2) -> 81
 power(9) -> 9, direct use the default argument pow=1
 
 
 # Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
     exclamation marks at the end of the string."""

    # Concatenate echo copies of word1 using *: echo_word
    echo_word = echo * word1

    # Concatenate '!!!' to echo_word: shout_word
    shout_word = echo_word + '!!!'

    # Return shout_word
    return shout_word

# Call shout_echo() with "Hey": no_echo
no_echo = shout_echo("Hey")

# Call shout_echo() with "Hey" and echo=5: with_echo
with_echo = shout_echo("Hey",5)

# Print no_echo and with_echo
print(no_echo)
print(with_echo)




 def add_all(*args):
     """ sum all values in *args together. """
     
     # initialize sum
     sum_all= 0 
     
     for num in args:
         sum_all += num
     
     return sum_all
     
 add_all(1) -> 1
 add_all(1,2) -> 3
 add_all(1,2,3,4) -> 10
 
# Define gibberish
def gibberish(*args):
    """Concatenate strings in *args together."""

    # Initialize an empty string: hodgepodge
    hodgepodge = ''   ----> NOTICE!!! empty string = ''

    # Concatenate the strings in args
    for word in args: --> notice: args with no others (either .item or () )
        hodgepodge += word

    # Return hodgepodge
    return hodgepodge

# Call gibberish() with one string: one_word
one_word = gibberish("luke")

# Call gibberish() with five strings: many_words
many_words = gibberish("luke", "leia", "han", "obi", "darth")

# Print one_word and many_words
print(one_word)
print(many_words)



 
 
 
 flexible arguments: **kwargs
 
 print_all(name='hugo bowne-anderson', employer='datacamp')
 -> name: hugo bowne-anderson
    employer: datacamp
 

def print_all(**kwargs):
    """print out key-value pairs in **kwargs."""
    for key in kwargs.item():   --> remember .item()
        print(key + \":\" + value)
    


# Define report_status
def report_status(**kwargs):
    """Print out the status of a movie character."""

    print("\nBEGIN: REPORT\n")

    # Iterate over the key-value pairs of kwargs
    for key, values in kwargs.items():
        # Print out the keys and values, separated by a colon ':'
        print(key + ": " + values)

    print("\nEND REPORT")

# First call to report_status()
report_status(name="luke", affiliation="jedi" ,status="missing")

# Second call to report_status()
report_status(name="anakin", affiliation="sith lord", status="deceased")







######################################### Course 3: Lambda functions and error-handling #########################################

lambda functions
syntax: lambda arguments : expression

raise_to_power = lambda x,y: x ** y
raise_to_power(2,3) -> 8

# Define echo_word as a lambda function: echo_word
echo_word = (lambda word1, echo: word1 * echo)


anonymous functions:
- function map takes two arguments: map(fun,seq)
- map() applies the function to ALL elements in the sequence
for example:
nums=[48,6,9,21,1]
square_all = map(lambda num: num ** 2, nums)
print(square_all) -> map object at 0x103e065c
print(list(square_all)) -> 2304,36,81,441,1



# Create a list of strings: spells
spells = ['protego', 'accio', 'expecto patronum', 'legilimens']

# Use map() to apply a lambda function over spells: shout_spells
shout_spells = map(lambda item: item + '!!!', spells)

# Convert shout_spells to a list: shout_spells_list
shout_spells_list = list(shout_spells)

# Print the result
print(shout_spells_list)








Filter() and lambda functions
The function filter() offers a way to filter out elements from a list that don't satisfy certain criteria.

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'pippin', 'aragorn', 'boromir', 'legolas', 'gimli', 'gandalf']

# In the filter() call, pass a lambda function and the list of strings, fellowship. 
# The lambda function should check if the number of characters in a string member is greater than 6; 
# use the len() function to do this. Assign the resulting filter object to result.
# Use filter() to apply a lambda function over fellowship: result
result = filter(lambda member: len(member) > 6, fellowship)

# Convert result to a list: result_list
result_list = list(result)

# Print result_list
print(result_list)





Reduce() and lambda functions
# Import reduce from functools
from functools import reduce

# Create a list of strings: stark
stark = ['robb', 'sansa', 'arya', 'brandon', 'rickon']

# Use reduce() to apply a lambda function over stark: result
result = reduce(lambda item1,item2: item1+item2, stark)

# Print the result
print(result)




Introduction to error handling

passing valid arguments

(3)
Errors and exceptions

(1)
def sqrt(x):
    """ xxxx""
    
    try:
        return x ** 0.5
    except:
        print('x must be an int or float')


(2)

def sqrt(x):
    """ xxxx""
    
    try:
        return x ** 0.5
    except TypeError:
        print('x must be an int or float')


(3)

def sqrt(x):
    """ xxxxx """"
    
    if x<0:
       raise ValueError('x must be non-negative)
       
    try:
       return xx ** 0.5
       
    except TypeError:
       print('x must be an int or float'
       


Exercise:

1. 
# Select retweets from the Twitter DataFrame: result
result = filter(lambda x: x[0:2] == 'RT', tweets_df['text']) --> find the first two character of string x: x[0:2]

# Create list from filter object result: res_list
res_list = list(result)

# Print all retweets in res_list
for tweet in res_list:
    print(tweet)
    
    



