Working with Dates and Times in Python

################################################### Course 1: Dates and Calendars ###################################################

import datetime import date
two_hurricanes_dates = date(2016,10,7), date(2017,6,21)] # year-month-day
print(two_hurricanes_dates[0].year)
print(two_hurricanes_dates[0].month)
print(two_hurricanes_dates[0].day)
print(two_hurricanes_dates[0].weekday()) # 0=Monday, 6=Sunday


Math with dates
from datetime import date
d1=date(2017,11,5)
d2=date(2017,12,4)
l=[d1,d2]
print(min(l)) -->2017-11-05
delta =d2-d1
print(delta.days) -> 29

from datetime import timedelta
td = timedelta(days=29)
print(d1+td) -> 2017-12-04


# A dictionary to count hurricanes per calendar month
hurricanes_each_month = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6:0,
		  				 7: 0, 8:0, 9:0, 10:0, 11:0, 12:0}

# Loop over all hurricanes
for hurricane in florida_hurricane_dates:
  month = hurricane.month
  hurricanes_each_month[month] += 1
  
print(hurricanes_each_month)

# Print the first and last scrambled dates
print(dates_scrambled[0])
print(dates_scrambled[-1]) --> last index = -1


# Put the dates in order
dates_ordered = sorted(dates_scrambled) --> sort the date: sorted(xxxx)

# Print the first and last ordered dates
print(dates_ordered[0])
print(dates_ordered[-1])



Turning dates into strings

d = date(2017,1,5)
print([d.isoformat()])
# The Isoformat() function is used to return a string of date, time, and UTC offset to the corresponding time zone in ISO 8601 format. 
some_dates['2000-01-01','1999-12-31']
print(sorted(some_dates))
--> ['1999-12-31','2000-01-01']

print(d.strftime('%Y')) -> 2017
print(d.strftime('Year is %Y')) -> Year is 2017
print(d.strftime("%Y/%m/%d") -> 2017/01/05



# Assign the earliest date to first_date
first_date = min(florida_hurricane_dates)

# Convert to ISO and US formats
iso = "Our earliest hurricane date: " + first_date.isoformat()
us = "Our earliest hurricane date: " + first_date.strftime('%m/%d/%Y')
<script.py> output:
    ISO: Our earliest hurricane date: 1950-08-31
    US: Our earliest hurricane date: 1950/08/31
    
print("ISO: " + iso)
print("US: " + us)
<script.py> output:
    ISO: Our earliest hurricane date: 1950-08-31
    US: Our earliest hurricane date: 08/31/1950

# Print the date in the format 'MONTH (YYYY)'
print(andrew.strftime('%B (%Y)'))

# Print the date in the format 'YYYY-DDD'
# where DDD is the day of the year) using %j
print(andrew.strftime('%Y-%j')) 


################################################### Course 2: Combining Dates and Times ###################################################
include the time:
from datetime import datetime
dt=datetime(2017,10,1,15,23,25)  # Oct 1 2017, 3:23:25 pm
dt=datetime(year=2017,month=10,day=1,hour=15,minute=23,second=25,micriosencond=500000) #5*0

dt.replace(minute=0,second=0)

Counting events before and after noon
# Within the for loop, complete the if statement to check if the trip started before noon.

# Create dictionary to hold results
trip_counts = {'AM': 0, 'PM': 0}
  
# Loop over all trips
for trip in onebike_datetimes:
  # Check to see if the trip starts before noon
  if trip['start'].hour < 12:
    # Increment the counter for before noon
    trip_counts['AM'] += 1
  else:
    # Increment the counter for after noon
    trip_counts['PM'] += 1
  
print(trip_counts)



----------------------------------
Printing and parsing datetimes

dt=datetime(2017,12,30,15,19,13)
print(dt.strftime('%Y=%m-%d')
print(dt.strftime('%Y=%m-%d %H:%M:%S')
print(dt.isoformat()) --> 2017-12-30 OT 15:19:13

-------> dt.isoformat()
         dt.strftime('xxx')

parsing datetimes with striptime
# dt=datetime.strptime(string to invert into the date time, the format of the datetime)

dt = datetime.strptime("12/30/2017 15:19:13","%m/%d/%Y %H:%M:S")


-- exercise:

# Write down the format string
fmt = "%Y-%m-%d %H:%M:%S"

# Initialize a list for holding the pairs of datetime objects
onebike_datetimes = []

# Loop over all trips
for (start, end) in onebike_datetime_strings:
  trip = {'start': datetime.strptime(start, fmt),
          'end': datetime.strptime(end, fmt)}
  
  # Append the trip
  onebike_datetimes.append(trip)

# Pull out the start of the first trip
first_start = onebike_datetimes[0]['start']

# Print out date with .isoformat(), then with .strftime() to compare
print(first_start.isoformat())
print(first_start.strftime(fmt))


# an unique timestamp
ts=1514665153.0
# convert to datetime and print
print(datetime.fromtimestamp(ts))
---> 2017-12-30 15:19:13

-- exercise:

# Import datetime
from datetime import datetime

# Starting timestamps
timestamps = [1514665153, 1514664543]

# Datetime objects
dts = []

# Loop
for ts in timestamps:
  dts.append(datetime.fromtimestamp(ts))
  
# Print results
print(dts)




--- working with durations

start = datetime(2017,10,8,23,46,17)
end = datetime(2017,10,9,0,10,57)
# substract datetimes to create a timedelta
duration = end - start
# substract datetimes to create a timedelta
print(duration.total_second())

# create a timedelta
delta1=timedelta(seconds=1)
print(start + delta1)
delta2=timedelta(days=1,seconds=1)


--- exercise:
# Initialize a list for all the trip durations
onebike_durations = []

for trip in onebike_datetimes:
  # Create a timedelta object corresponding to the length of the trip
  trip_duration = trip['end'] - trip['start']
  
  # Get the total elapsed seconds in trip_duration
  trip_length_seconds = trip_duration.total_seconds()
  
  # Append the results to our list
  onebike_durations.append(trip_length_seconds)
  
  
  
# What was the total duration of all trips?
total_elapsed_time = sum(onebike_durations)

# What was the total number of trips?
number_of_trips = len(onebike_durations)
  
# Divide the total duration by the number of trips
print(total_elapsed_time / number_of_trips)
  
  
# Calculate shortest and longest trips
shortest_trip = min(onebike_durations)
longest_trip = max(onebike_durations)

# Print out the results
# turning shortest_trip and longest_trip into strings so they can print.
print("The shortest trip was " + str(shortest_trip) + " seconds")
print("The longest trip was " + str(longest_trip) + " seconds") 
  
  
################################################### Course 3: Time Zones and Daylight Saving ###################################################
UTC offsets

from datetime import datetime,timedelta,timezone

# US eastern standard time zone
ET=timezone(timedelta(hours=-5))
# timezone-aware datetime
dt=datetime(2017,12,30,15,9,3,tzinfo=ET)

# India standard time zone
IST = timezone(timedelta(hours=5,minutes=30))
# convert to IST
print(dt.astimezone(IST))
--> '2017-12-31 01:39:03 + 05:30'

-- Adjusting timezone vs changing tzinfo
print(dt.replace(tzinfo=timezone.utc))


-- exercise:

--- 1

# Import datetime, timezone
from datetime import datetime, timezone

# October 1, 2017 at 15:26:26, UTC
dt = datetime(2017, 10, 1, 15, 26, 26, tzinfo=timezone.utc)

# Print results
print(dt.isoformat())

--- 2

# Import datetime, timedelta, timezone
from datetime import datetime, timedelta, timezone

# Create a timezone for Pacific Standard Time, or UTC-8
pst = timezone(timedelta(hours=-8))

# October 1, 2017 at 15:26:26, UTC-8
dt = datetime(2017, 10, 1, 15, 26, 26, tzinfo=pst)

# Print results
print(dt.isoformat())


--- 3

# Create a timezone object corresponding to UTC-4
edt = timezone(timedelta(hours=-4))

# Loop over trips, updating the start and end datetimes to be in UTC-4
for trip in onebike_datetimes[:10]:
  # Update trip['start'] and trip['end']
  trip['start'] = trip['start'].replace(tzinfo = edt)
  trip['end'] = trip['end'].replace(tzinfo = edt)
  
  
-- 4

# Loop over the trips
for trip in onebike_datetimes[:10]:
  # Pull out the start
  dt = trip['start']
  # Move dt to be in UTC
  dt = dt.astimezone(timezone.utc)
  
  # Print the start time in UTC
  print('Original:', trip['start'], '| UTC:', dt.isoformat())
  
  
  
  
time zone database

from datetime import datetime
from dateutil import tz

# tz database
et = tz.gettz('America/New_York') # Create a timezone object for Eastern Time

# Loop over trips, updating the datetimes to be in Eastern Time
for trip in onebike_datetimes[:10]:
  # Update trip['start'] and trip['end']
  trip['start'] = trip['start'].replace(tzinfo=et)
  trip['end'] = trip['end'].replace(tzinfo=et)



# When you need to move a datetime from one timezone into another, use .astimezone() and tz
# Create the timezone object
uk = tz.gettz('Europe/London')

# Pull out the start of the first trip
local = onebike_datetimes[0]['start']

# What time was it in the UK?
notlocal = local.astimezone(uk) --> important!!!!!

# Print them out and see the difference
print(local.isoformat())
print(notlocal.isoformat())




------- Starting daylight saving time/ Summer time
spring_ahead_159am = datetime(2017,3,12,1,59,59)
# spring_ahead_159am.isoformat()
spring_ahead_3am=datetime(2017,3,12,3,0,0)

(spring_ahead_3am - spring_ahead_159am).total_seconds()

from datetime import timezone,timedelta
EST=timezone(timedelta(hours=-5))
EDT=timezone(timedelta(hours=-4))

spring_ahead_159am=spring_ahead_159am.replace(tzinfo=EST)
spring_ahead_3am=spring_ahead_159am.replace(tzinfo=EDT)
(spring_ahead_3am-spring_ahead_159am).seconds -> 1


# Using dateutil

from datetime import tz
eastern = tz.gettz("American/New_York")
spring_ahead_159am=datetime(2017,3,12,1,59,59,tzinfo=eastern)
spring_ahead_3am=datetime(2017,3,12,3,0,0,tzinfo=eastern)

--- exercise
# Import datetime, timedelta, tz, timezone
from datetime import datetime, timedelta, timezone
from dateutil import tz

# Start on March 12, 2017, midnight, then add 6 hours
start = datetime(2017, 3, 12, tzinfo = tz.gettz('America/New_York'))
end = start + timedelta(hours=6)
print(start.isoformat() + " to " + end.isoformat())

# How many hours have elapsed?
print((end - start).total_seconds()/(60*60))

# What if we move to UTC?
print((end.astimezone(timezone.utc) - start.astimezone(timezone.utc))\
      .total_seconds()/(60*60))
      
      
      
# Import datetime and tz
from datetime import datetime
from dateutil import tz

# Create starting date
dt = datetime(2000, 3, 29, tzinfo = tz.gettz('Europe/London'))

# Loop over the dates, replacing the year, and print the ISO timestamp
for y in range(2000, 2011):
  print(dt.replace(year=y).isoformat())      
      
      
      
      
------ Ending daylight saving time
eastern=tz.gettz('US/Eastern')
first_1am=ddatetime(2017,11,5,1,0,0,tzinfo=eastern)
second_1am=ddatetime(2017,11,5,1,0,0,tzinfo=eastern)
second_1am=tz.enfold(second_1am)

tz.datetime_ambigious(first_1am)
(first_1am - second_1m).total_seconds() --> 0

first_1am=first_1am.astimezone(tz.UTC)
second_am=second_1am.astimezone(tz.UTC)
(first_1am - second_1m).total_seconds() --> 3600


######### ambiguous ###### --> datetime_ambiguous(dt,tz) - Given a datetime and a time zone
# Loop over trips
for trip in onebike_datetimes:
  # Rides with ambiguous start
  if tz.datetime_ambiguous(trip['start']):
    print("Ambiguous start at " + str(trip['start']))
  # Rides with ambiguous end
  if tz.datetime_ambiguous(trip['end']):
    print("Ambiguous end at " + str(trip['end']))

















################################################### Course 4: Easy and Powerful: Dates and Times in Pandas ###################################################
