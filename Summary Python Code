# create numbers
np.linspace(start,end, num=xx)

np.arange([start, ]stop, [step, ], dtype=None)
# np.arange(start=1, stop=10, step=3) --> array([1, 4, 7])

# visualize the number of each observation
sns.countplot(x=df['xx']).set_title('xxx')

# check if there are any null values
df.isnull().value().any()
# drop the null values
df.dropna()

# resample price datase by month and forward fill the values
df_price = df_price.resample('M').ffill() / bfill()

# combine two columns
df = pd.contact([df_sales,df_prices],axis=1)

  
# plots
plt.hist()
sns.swarmplot()


# iterating the columns
for col in data.columns:
    print(col)
>>> the output is the columns name of each column, it is one row / an array  

Pandas DataFrame.values attribute return a Numpy representation of the given DataFrame.


# Eliminating null values
    
for i in X.columns:
    X[i].fillna(int(X[i].mean))
    
# check
for i in X.columns:
   print(X[i].isnull().sum())
 

############### distributions
# CDF 
x,y=ecdf(data)
# covariance matrix
np.cov(x,y)
# Pearson correlation
pearson_r(x,y)
# correlation coefficient
np.corrcoef(x_simple, y_simple)

# percentiles
np.percentile (data['column'],[a,b]) --> a b determine the CI

 # random
 np.random.random()
 np.random.seed()
 np.random.binomial(n,p,size=xx)
 np.random.poisson(probability,size=xx)
 np.random.normal(mean,std,size=xx)
 np.random.exponential(mean,size=xx)
 
 slop, intercept = np.polyfit(x, y, deg)    # Least squares polynomial fit, NEVER forget the degree
 
 np.random.choice(list,size=None,replace=True/False)  # gets the random samples of a one-dimensional array
 
 np.random.permutation() # Randomly permute a sequence, or return a permuted range.
 # Example: arr = np.arange(9).reshape((3, 3))
            np.random.permutation(arr)
            array([[6, 7, 8], # random
                   [0, 1, 2],
                   [3, 4, 5]])
 
 # calculate the p-value
 p = np.sum(bs_replicates <= np.mean(force_b)) / 10000
 prin('p-value=',p)
 
 np.array([True] * 5 + [False] * 3) creates a Boolean array with 5 True entries and 3 False entries
 
 
 # how to set the replications:
 perm_replicates = draw_perm_reps(nht_dead, nht_live, diff_of_means, size=10000)
 
 
-- value_counts(): returns the frequency distribution of each value in the column
-- index:  get the most frequent value. 
# Impute with the most frequent value
        cc_apps = cc_apps.fillna(cc_apps[col].value_counts().index[0]) 
 
 
 

If you do not know the number of arguments that will be passed into your function, 
there is a prefix you can add in the function definition, which prefix?
 
def my_function(*kids):
  print("The youngest child is " + kids[2])
 
 
 
 enumerate() : simplify looping with counters 列举；枚举；计算
 
 -------- interating with for loops
 
index = 0
 
for value in values:
    print(index,value)
    index += 1
>>>
0 a
1 b
2 c


# if you forget to update the index

index = 0
for value in values:
    print(index,value)
>>>
0 a
0 b
0 c

------ use range() combined with len() --> this way, you do not need to update index by hand

for index in range(len(values)):
    value = values[index]
    print(index,value)
>>>
0 a
1 b
2 c
    


----- Using Python's enumerate()

Syntax:
      enumerate( interable, start = 0 )

1. 
for count,value in enumerate(values):
    print(count,value)
    
>>> 
0 a
1 b
2 c
 
The count of the current iteration
The value of the item at the current iteration
 
 
 2.
 for count,value in enumerate(values,start = 1):
     print(count,value)
     
 >>>
1 a
2 b
3 c
 
 
 
 More examples:

1. 
languages = ['Python', 'Java', 'JavaScript']

enumerate_prime = enumerate(languages)

# convert the enumerate object to list
print(list(enumerate_prime)
# Output: [(0, 'Python'), (1, 'Java'), (2, 'JavaScript')]
 
 
 
 
 2.

grocery = ['bread', 'milk', 'butter']

for item in enumerate(grocery):
  print(item)

print('\n')

for count, item in enumerate(grocery):
  print(count, item)

print('\n')
# changing default start value
for count, item in enumerate(grocery, 100):
  print(count, item)
  
  
  
>>> output:
(0, 'bread')
(1, 'milk')
(2, 'butter')

0 bread
1 milk
2 butter

100 bread
101 milk
102 butter
 
 
 
 
 
