python 123 为基础


----------------------------------------------- 01. 人机交互 ----------------------------------------------- 

输入整数: n = int(input())
输入浮点数： m = float(input())
确定保留几位小数：print("{:.3f}".format(n)) --->这个格式一定记住 ！！！！ 

-----> 把数据类型设置在input外侧



input()内不能是空的，得写东西。例如 name = input("My name is: ")
两种设置print方法
方法一： print("My name is {}, my postcode is {}.".format(name,postcode))
方法二： print(f'My name is {name}, my postcode is {postcode}')


range(start,stop,step).     stop is not included

print(range(1,5,1))   --> range(1, 5)

for i in range(1,5,1):
    print(i)
--->    
1
2
3
4    


n = 5
for i in range(1,n+1):
    print(i,end='')
--->
12345

n = 5
for i in range(1,n+1):
print(i,end=' ')
--->
1 2 3 4 5 


END:
by default python's print() function ends with a new line.
for ends the output with a space: print(xx,end=' ')
for ends the output without a space: print(xx,end='')


print a word, one character per line:
word = 'Wednesday'
for i in word:
    print(i)
-->
W
e
d
n
e
s
d
a
y


print()格式设置

------- The end parameter -------
By default, the print method ends with a newline. This means there is no need to explicitly specify the parameter end as '\n'.
-> 说的是不同print之间，每一个print输出的都是另起一行。所以要是想下一行的print不重新起一行，我们可以设置end
print("Studytonight",)
print("is awesome")
Studytonight
is awesome

print("Studytonight", end=' ')
print("is awesome")Studytonight is awesome


Studytonight is awesome



------- The sep parameter -------
sep适用于同一个print里的东西
print(1,2,3,4,sep='&') -> 1&2&3&4
print(123,456,sep='&') -> 123&456


The sep parameter, used in conjunction with the end parameter is generally used in production code to print data in a readable fashion.

print("Studytonight","is", sep = " _ ",end=' ')
print("Great","Right",sep='&')
Studytonight _ is Great&Right

sep=' '：用于分隔多个输出之间的分隔
end='\n'：输出语句的结束符号，默认每个输出语句结束时都用换行符 '\n' 结尾，使光标换到下一行。

在一行内输出1-5，用空格分隔:  print(1,2,3,4,5)
在一行内输出1-5，用逗号分隔:  print(1,2,3,4,5,sep=',')
分5行输出 1-5，每行一个数字:  for i in range(1,6):
                               print(i,end='\n')


if __name__ == '__main__': 和 def 函数的联合应同：
先定义函数，然后用‘if __name__ == '__main__': 去call之前定义的function

例子：
def fa(a,b):
    print("the sum of a and b is {}".format(a+b))
def fb(a,b):
    print("the multiplication of a and b is {}".format(a*b))
if __name__ == '__main__':
    a = int(input("a= "))
    b = int(input("b= "))
    fa(a,b)
    fb(a,b)
    
或者

def fa(a,b):
    print(f"the sum of a and b is {a+b}")
def fb(a,b):
    print(f"the multiplication of a and b is {a*b}")
if __name__ == '__main__':
    a = int(input("a= "))
    b = int(input("b= "))
    fa(a,b)
    fb(a,b)


output:
a= 2
b= 3
the sum of a and b is 5
the multiplication of a and b is 6




----------------------------------------------- 02 数值运算 ----------------------------------------------- 

a = eval(input())   #输入整数字符串，转换为整数；输入浮点数字符串，转换为浮点数

print(type(eval("5"))) <class 'int'>
print(type(eval("4.3"))) <class 'float'>



pow function
The pow() function returns the value of x to the power of y (x^y).

pow(x, y)




换披萨
试问一个m英寸的大披萨至少要更换几个n英寸的小披萨，顾客才不吃亏？

import math  # 导入math模块

m = int(input())  # 输入大披萨直径 m英寸
n = int(input())  # 输入小披萨直径 n英寸

# 一英寸约等于2.54厘米
radius_of_m = int(m * 2.54) / 2  # 计算大披萨直径，厘米，取整，再计算半径
radius_of_n = int(n * 2.54) / 2  # 计算小披萨直径，厘米，取整，再计算半径

num = (radius_of_m * radius_of_m) / (radius_of_n * radius_of_n)  # 计算大小披萨面积比值
print(math.ceil(num))  # 格式化输出向上取整


三角函数
180度 = math.pi
sin -> math.sin
cos -> math.cos

sin(60) -> sin(math.pi/3)



-----------------------------------------------  03 简单循环 ----------------------------------------------- 
用一行代码求和
输入一个正整数 n ，计算从 1 到 n 各数字的和，要求用一行代码实现。

print(range(1,n)) --> range(1,n)

print(sum(range(1,4)) --> 6 (1+2+3)

===> print(sum(range(0,int(input())+1)))


求数列前n项的平方和

n = int(input())
sum = 0
for i in range(1,n+1):
    sum = sum + i ** 2
print(sum)




用户输入一个小于10的正整数，求1 + 12 + 123 + 1234 + …… 的前n项的和‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬

sum,tem = 0,0
n = int(input())

for i in range(1,n+1):
    tem = tem * 10 + i
    sum = sum + tem

print(sum)







奇数数列求和
输入一个正整数 n，求数列1，3，5，……，（2n-1）的前n项的和。


1. 
n = int(input())
print(sum(range(1,2*n,2)))     # 步长为2

2. 
n = int(input())
sum = 0
for i in range(1,n+1):
    sum = sum + (2*i -1)   --> 也就是题目要求的2n-1
print(sum)




有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13...求出这个数列的前 n 项之和
# 除了首项，分子为前一项分子分母之和，分母为前一项分子

n = int(input())
sum_of_n = 0
a,b=2,1
for i in range(1,n+1):
    sum_of_n = sum_of_n + a/b
    b,a = a,a+b
print(round(sum_of_n,3))






正负交错数列前n项和
1-1/2+2/3-3/5+4/8-5/13+...的前n项和

# 分析：
# 分子规律为：1，1，2，3，4，5，...，除首个数字外是自然数
# 分母规律为：1，2，3，5，8，13...，除首个数字外，后面每个数是前面两个数的加和
# 符号规律：正负交替

n = int(input())
result = 1                        # 首项的值，作为累加初值
sign = -1                         # 符号，第二项是负值，
previous, current = 1, 1          # 分母数字的初值，从第二项开始符合这个规律
for i in range(1, n):             # 从1到n-1遍历n-1次. -->这是因为第一项的result就是1（初始值），所以这里到n-1即可，即range(1,n)
	previous, current = current, previous + current  # 下一个数值是前面两个数的加和
	result = result + sign * i / current             # 注意分子是 i
	sign = -sign                                     # 改变正负号
print('{:.6f}'.format(result))




--- map string split list

Python’s map() is a built-in function that allows you to process and transform all the items in an iterable without using an explicit for loop, 
a technique commonly known as mapping.

example:
1. Using loop
numbers = [ 1,2,3,4,5]
squared =[]
for num in numbers:
     squared.append(num**2)
 squared
 >>> [1,4,9,16,25]
 
 
 2. Using map
 def square(number):
     return number ** 2
 
 numbers = [1,2,3,4,5]
 squared = map(square,numbers)
 >>> [1,4,9,16,25]



--- Using the Methods of str

>>> string_it = ["processing", "strings", "with", "map"]
>>> list(map(str.capitalize, string_it))
['Processing', 'Strings', 'With', 'Map']

>>> list(map(str.upper, string_it))
['PROCESSING', 'STRINGS', 'WITH', 'MAP']

>>> list(map(str.lower, string_it))
['processing', 'strings', 'with', 'map']


--- str.strip()

>>> with_spaces = ["processing ", "  strings", "with   ", " map   "]

>>> list(map(str.strip, with_spaces))
['processing', 'strings', 'with', 'map']



----- 统计学生平均成绩与及格人数

1. 
grade = (map(eval, input('输入学生分数并用空格隔开:').split()))
over_sixty = 0
sum = 0
people = 0
for i in grade:
    sum = sum + i
    people += 1
    if i >= 60:
        over_sixty= over_sixty + 1

average = sum/ people
people_pass = over_sixty

print("the average score is {:.3f}".format(average))
print("the number of students who pass the exam is {}".format(people_pass))


2.
grade = list(map(float,input("scores record: ").split()))
average = sum(grade)/len(grade)
count= (len(list(x for x in grade if x>= 60)))
print("average = {}".format(average))
print("count = {}".format(count))


----> 注意，len（）只可以用给list
len(): Return the number of items in a list:





百钱买百鸡A
鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，如果要求鸡翁、鸡母、鸡雏都不为零，问鸡翁、鸡母、鸡雏各几何？

1.
for cock in range(1, 101):                 # 公鸡数量不为0且小于或等于100
    for hen in range(1, 101):              # 母鸡数量不为0且小于或等于100
        for chicken in range(1, 101):   # 小鸡数量大于0小于等于100且是3的倍数
            if chicken % 3 == 0:
                if cock + hen + chicken == 100 and 5 * cock + 3 * hen + chicken // 3 == 100:
                    print(cock, hen, chicken)  # 遇到满足条件的数字组合就输出
2.
for x in range(1,101):
    for y in range(1,101):
        z = 100 -x - y
        if 5*x+3*y+z/3 == 100 and z%3 == 0:
            print(x,y,z)
            
 
The Python Modulo Operator (%):  It returns the remainder of dividing the left hand operand by right hand operand
The double slash (//) operator is used in python for different purposes. One use of this operator is to get the division result.

print(7%2) >>>> 1
print(7//2) >>>> 2



-----------------------------------------------  04 简单分枝 ----------------------------------------------- 






-----------------------------------------------  05 流程控制 ----------------------------------------------- 





-----------------------------------------------  06 函数 ----------------------------------------------- 
