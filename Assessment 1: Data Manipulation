1. Calculate the std
import numpy as np
sd_age = np.std(age)

2. show the sqrt of all values in a df:
print(df.apply(np.sqrt))
---> 
      apply() method. 
      This function acts as a map() function in Python. It takes a function as an input and applies this function to an entire DataFrame.


3. select one column from the df
print(df.loc[:,["gh owner"])


4. show the row satisfies a condition
print(df[df["stars"] == 1450)


6. drop duplicates:
chess.drop(columns = "Gender",inplace=True)


8. Do calculation on a particular column of the df
import pandas as pd
print(df.stars.transform(lambda x: x/1000)) # stars is the column name



9. find the target column
print(df.loc['two':])


10. show the descriptions:
print(food.describe())



14. output all index of the df:
print(food.index)




inter-quatile range:
np.percentile() 
scipy.stats.iqr() --> iqr_age = stats.iqr(age)


sns.scatterplot(x = "age", y = "value", hue = "emissions", data = valuation)


Differences between:
print(df.iloc[:,[2]])
print(df.loc[:,["gh owner"]])


import pandas as pd
print(pd.DataFrame({
    "x": [1], 
    "y": [3],
}))
 
 
print(employee.index) -> no parenthesis after index 
 
 
 np.average()
 np.std()
 np.var()
 
 
 -- a plot with scatterplot and histogram
 sns.jointplot(x='',y='',data=)
 
 
 --> output target columns
 print(df[['alignment', 'character']]) --> two [[ ]]


--> set index
chess = chess.set_index('Fide id')





--> facets 
g = sns.FacetGrid(
            tips, 
            col="time", 
            hue="smoker"
            row="smoker"
            )
            
            
--> swarmplot
ax = sns.swarmplot(x="measurement", 
                   y="value", 
                   colors="species", 
                   hue="species", 
                   data=iris)
                   
                   
                   
print(employee[employee['salary_usd'] == 5000])                   
                   


# Select the three rows having the smallest values
print(df.nsmallest(3, 'population'))


print(df.apply(np.sqrt)) ---> df.apply 



# barplot
ax = sns.barplot(x="Grade", y="Count", data=df)


# output according to the value of one column
result = df.sort_values('salary', ascending = True) --> according to 'salary' column
print(result)



heart_clean = heart.rename(columns=column_names)




subset_wine = wine[['country', 'price']] --> two [[ ]]
print(subset_wine.head())


# output info according to values
protein = food[(food['protein'] < 10) & (food['protein'] > 4)]

# sorting accourding to index
employee_sorted = employee.sort_index()




