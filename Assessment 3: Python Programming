1.
def hours_to_seconds(hours):
    return hours * 60 * 60

hours_to_seconds(8)



3.
if day == 'friday':
    print('It is Friday!')
else:
    print('It is not Friday!')
    
    
4.
class Planet:
    def __init__(self, name):
        self.name = name
        
v = Planet('venus')

v.name   




5. 
boardgames.append('Patchwork')




10. 
# add to dic
d = {
    'apple': 1,
    'banana': 2,
    'coconut': 3
}
d['durian'] = 4



11.
# change values in dic
book = {
    'title': 'The Giver',
    'author': 'Lois Lowry',
    'rating': 4.13
}

book['rating'] = 4.6  # single =



13.
# add 32 to all values in a list
vals = [25, 30, 33, 35, 40, 180]
new_vals = [val + 32 for val in vals]



14.
def point(x, y):
    return x, y
    
  
  
15.
letters = ['a', 'b', 'c']
for ii, x in enumerate(letters):

# The enumerate() method adds a counter to an iterable and returns it (the enumerate object).





2.
class AstroBody:
    description = 'Natural entity in the observable universe.'    

class Star(AstroBody):
    pass

sun = Star()

sun.description



6.
class Dog:
    def __init__(self):
        pass
    
    def bark(self):
        return "bark bark bark bark bark bark..."

d = Dog()
d.bark() --> should be d.bark() not bark()





7.
class Candy:
    flavor = 'sweet'
    
    def __init__(self, name):
        self.name = name
        
c = Candy('Chocolate')

c.name




12.
def to_int(x):
    try:
        return int(x)
    except ValueError: --> except statement catches an exception
        print("that value can't be turned into an integer")

to_int("")





14.
x = (1, 2, 3)
s = set(x)
s
---> {1, 2, 3}



15.
class Person:
   def __init__(self, name):
        self.name = name

m = Person('Michael')

m.name




16.
[s.upper() for s in ['hello', 'world']]
--> ['HELLO', 'WORLD']



17.

def efficient_sample(n):
  x = [random.random() for i in range(n)]
  return x

efficient_sample(20)



18.
def factorial(n):
    """returns n!"""
    return 1 if n < 2 else n * factorial(n-1)

factorial.__doc__
--- > 'returns n!'

19.
def add_two(x: int)-> int: # -> marks the return function annotation.
  return x + 2

add_two(1)



20.
boardgames = [
  'Pandemic Legacy: Season 1', 
  'Terraforming Mars', 
  'Brass: Birmingham'
]

boardgames.insert(0, 'Gloomhaven')
print(boardgames)

# Expected Output
['Gloomhaven', 'Pandemic Legacy: Season 1', 'Terraforming Mars', 'Brass: Birmingham']

21.
w = 'python'

w_iterator = iter(w) # the iter() function creates an object which can be iterated one element at a time.

next(w_iterator)

--> 'p'

# The next() function returns the next item from the iterator.



22. 
lst = ['numpy', 'pandas', 'requests']

lst_gen = (pkg for pkg in lst)


[-----]

output: 'numpy'

you need: next(lst_gen)


23. 

class AstroBody:
    description = 'Natural entity in the observable universe.'    

class Star [---]:
    pass

sun = Star()

sun.description

output: 'Natural entity in the observable universe.'

you need: class Star(AstroBody):



24.

def square_args(func):
  def inner(a, b):
    return func(a ** 2, b ** 2)
  return inner

[------]
def multiply(a, b):
  return a * b
  
multiply(3, 9)

output: 729

You need: @square_args ---> square_args is a decorator.



25. 

a = {1, 2, 3, 4}
b = {3, 4, 5, 6}

[----]

output: {1, 2}

You need: a.difference(b)


26. enumerate(letters)

for index ,value in enumerate(letters):
    print(index,value)
    
0 a
1 b
2 c
