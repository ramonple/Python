Python Data Science Toolbox (Part 2)

summary

Create a range object that would produce the values from 10 to 20 using range(). Assign the result to values
values = range(10, 21) --> should be x: y-1






############################################ Course 1: Using iterators in PythonLand ############################################

iterating with a for loop:
for letter in 'DataCamp':
    print (letter)
    
for i in range(4):
    print(i)
    
Iterators vs. iterables
- iterable:
   example" lists, strings, dictionaries, file connections
   An objective with an associated iter() method
   Apply .iter() to an iterable creates an iterator
- iterator:
   produces next value with next()
   
iterating over iterables: next()
word='Da'
it = iter(word)
next(it) -> D
next(it) -> a

iterating at once with *
word = ' Data'
it=iter(word)
print(*it) -> D a t a
-- once you do so, you cannot do it again. For example, you call print(*it) for the second time, nothing will be outputted.

iterating over dictionaries: [ unpack the dictionary, through .item() ]
pythonistas={'hugo':'bown','francis':'castro'}
for key,value in pythonistas.items(): --> unpack them
    print(key,value)
-> francis castro
   hugo bown


iterating over file connections
file = open('file.txt')
it=iter(file)
print(next(it))
--> this is the first line.



# Create a list of strings: flash
flash = ['jay garrick', 'barry allen', 'wally west', 'bart allen']

# Print each list item in flash using a for loop
for person in flash:
    print(person)

# Create an iterator for flash: superhero
superhero = iter(flash)

# Print each item from the iterator
print(next(superhero))
print(next(superhero))
print(next(superhero))
print(next(superhero))



# Create an iterator for range(3): small_value
small_value = iter(range(3))

# Print the values in small_value
print(next(small_value))
print(next(small_value))
print(next(small_value))

# Loop over range(3) and print the values
for num in range(3):
    print(num)


# Create an iterator for range(10 ** 100): googol
googol = iter(range(10 ** 100))



Create a range object that would produce the values from 10 to 20 using range(). Assign the result to values
values = range(10, 21) --> should be x: y-1






Playing with iterators

using enumerate()
enumerate(iterable, start=0)
The enumerate() method adds a counter to an iterable and returns it (the enumerate object).
-- iterable - a sequence, an iterator, or objects that supports iteration
-- start (optional) - enumerate() starts counting from this number. If start is omitted, 0 is taken as start.

avengers =['hawkeye','iron men','thor','quicksilver']
e = enumerator(avengers)
print(type(e))
--> <class 'enumerate'>
# convert enumerate object to list
e_list=list(e)
print(e_list)
---> [(0,'hawkeye'),(1,'iron men'),(2,'thor'),(3,'quicksilver')]



enumerate() and unpack

avengers =['hawkeye','iron men','thor','quicksilver']
for index, value in enumerate(avengers):
    print(index,value)
--> 0 hawkeye
    1 iron men
    2 thor
    3 quicksilver
    

Complete the first for loop by unpacking the tuples generated by calling enumerate() on mutants. 
Use index1 for the index and value1 for the value when unpacking the tuple.
# Unpack and print the tuple pairs
for index1,value1 in enumerate(mutants):
    print(index1, value1)

Complete the second for loop similarly as with the first, but this time change the starting index to start from 1 
by passing it in as an argument to the start parameter of enumerate(). Use index2 for the index and value2 for the value when unpacking the tuple.
# Change the start index
for index2, value2 in enumerate(mutants,1):
    print(index2, value2)
    
    






using zip()
Join two tuples together:
The zip() function takes iterables (can be zero or more), aggregates them in a tuple, and returns it.
zip(*iterables)
can be built-in iterables (like: list, string, dict), or user-defined iterables

avengers =['hawkeye','iron men','thor','quicksilver']
names = ['barton','stark','odinson','maxmoff']
z = zip(avengers,names)
print(type(z))
--> < class 'zip' >
z_list=list(z)
print(z_list)
--> [('hawkeye','barton'),('iron man','stark'),('thor','odinson'),('quicksilver','maximoff')]
for z1,z2 in zip(avengers,names):
    print(z1,z2)
---> hawkeye barton
     iron man stark
     thor odinson
     quicksilver maximoff




# Create a list of tuples: mutant_data
Using zip() with list(), create a list of tuples from the three lists mutants, aliases, and powers (in that order) and assign the result to mutant_data.
mutant_data = list(zip(mutants, aliases, powers))

# Create a zip object using the three lists: mutant_zip
Using zip(), create a zip object called mutant_zip from the three lists mutants, aliases, and powers.
mutant_zip = zip(mutants, aliases, powers)

# Unpack the zip object and print the tuple values
for value1, value2, value3 in mutant_zip:
    print(value1, value2, value3)
    
    
    








    




