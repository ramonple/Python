######################################## Course 1: Graphical Exploratory Data Analysis ########################################

plt.hist
sns.swarmplot

--------------------------------
Exploratory data analysis (EDA) : organizing, plotting, summarizing

- plotting a histogram
import matplotlib.pyplot as plt
plt.hist
plt.xlabel
plt.ylabel

import seaborn as sns
sns.set()
plt.hist
plt.xlabel=('
plt.ylabel

-------------------------------------------- exercise
# Import plotting modules
import matplotlib.pyplot as plt
import seaborn as sns

# Set default Seaborn style
sns.set()

# Plot histogram of versicolor petal lengths
_ = plt.hist(versicolor_petal_length)

# Label axes
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('count')

# Show histogram
plt.show()

# Import numpy
import numpy as np

# Compute number of data points: n_data
n_data = len(versicolor_petal_length)

# Number of bins is the square root of number of data points: n_bins
n_bins = np.sqrt(n_data)

# Convert number of bins to integer: n_bins
n_bins = int(n_bins)

# Plot the histogram
_ = plt.hist(versicolor_petal_length, bins=n_bins)

# Label axes
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('count')

# Show histogram
plt.show()
-------------------------------------------

Plot all of your data: Bee swarm plots

_=sns.swarmplot(x='state',y='dem_share',data=df_swing)
_=plt.xlabel('state')
_=plt.ylabel('percent of vote for Obama')




Plot all of your data: ECDFs
- Empirical cumulative distribution function (ECDF)

# Making an ECDF
import numpy as np
x=np.sort(df_swing['dem_share'])
y=np.array(1,len(x)+1) / lex(x)
_=plt.hist(x,y,marker='.',linestyle='none')
_=plt.xlabel('xxx')
_=plt.ylabel('xxx')
plt.margins(0.02) # keep data off plot edges


def ecdf(data):
    """Compute ECDF for a one-dimensional array of measurements."""
    # Number of data points: n
    n = len(data)

    # x-data for the ECDF: x
    x = np.sort(data)

    # y-data for the ECDF: y
    y = np.arange(1, n+1) / n

    return x, y


# Compute ECDF for versicolor data: x_vers, y_vers
x_vers, y_vers = ecdf(versicolor_petal_length)

# Generate plot
_ = plt.plot(x_vers,y_vers,marker='.',linestyle='none')

# Label the axes
_=plt.xlabel('versicolor_petal_length')
_=plt.ylabel('ECDF')


# Display the plot

plt.show()


# Compute ECDFs
x_set,y_set = ecdf(setosa_petal_length)
x_vers,y_vers = ecdf(versicolor_petal_length)
x_virg,y_virg=ecdf(virginica_petal_length)


# Plot all ECDFs on the same plot
_=plt.plot(x_set,y_set,marker='.',linestyle='none')
_=plt.plot(x_vers,y_vers,marker='.',linestyle='none')
_=plt.plot(x_virg,y_virg,marker='.',linestyle='none')


# Annotate the plot
plt.legend(('setosa', 'versicolor', 'virginica'), loc='lower right')
_ = plt.xlabel('petal length (cm)')
_ = plt.ylabel('ECDF')

# Display the plot
plt.show()

######################################## Course 2: Quantitative Exploratory Data Analysis ########################################
# Introduction to summary statistics: The sample mean and median
mean_length_vers=np.mean(versicolor_petal_length)

# Percentiles, outliers, and box plots
np.percentile(data['column'],[25,50,75])

import matplotlib.pyplot as plt
import seaborn as sns
_=sns.boxplot(x='',y='',data=df) -- Never forget the data=
_=plt.xlabel('xx')
_=plt.ylabel('xx')

# Variance and standard deviation
np.var()
np.std()


-- exercise
# Array of differences to mean: differences
differences = versicolor_petal_length - np.mean(versicolor_petal_length)

# Square the differences: diff_sq
diff_sq = differences**2

# Compute the mean square difference: variance_explicit
variance_explicit = np.mean(diff_sq)

# Compute the variance using NumPy: variance_np
variance_np = np.var(versicolor_petal_length)

# Print the results
print(variance_explicit, variance_np)


# Covariance and the Pearson correlation coefficient
covariance: how to quanties vary together = 1/n (sum (xi-x-bar)(yi-y-bar))
pearson correlation coefficient = covariance/ (std of x) (std of y) = variability due to codependence / indenpendt variability

-- exercise
# Compute the covariance matrix: covariance_matrix
covariance_matrix = np.cov(versicolor_petal_length, versicolor_petal_width)

# Print covariance matrix
print(covariance_matrix)

# Extract covariance of length and width of petals: petal_cov
petal_cov = covariance_matrix[0,1] - Important!!!

# Print the length/width covariance
print(petal_cov)



def pearson_r(x, y):
    """Compute Pearson correlation coefficient between two arrays."""
    # Compute correlation matrix: corr_mat
    corr_mat =np.corrcoef(x,y)

    # Return entry [0,1]
    return corr_mat[0,1]

# Compute Pearson correlation coefficient for I. versicolor: r
r = pearson_r(versicolor_petal_length,versicolor_petal_width)

# Print the result
print(r)


######################################## Course 3: Thinking Probabilistically-- Discrete Variables ########################################

######################################## Course 4: Thinking Probabilistically-- Continuous Variables ########################################
